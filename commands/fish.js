import { SlashCommandBuilder } from 'discord.js';
import { getFishButtons } from '../components/fishButtons.js';
import { User } from '../schemas/userSchema.js';
import { GlobalStats } from '../schemas/globalStatsSchema.js';
import { selectRandomFish } from '../utils/fishingLogic.js';
import { checkFishingCooldown, setFishingCooldown, clearFishingCooldown, formatCooldownTime } from '../utils/cooldownManager.js';
import { updateQuestProgress } from '../utils/questManager.js';
import { logFishing } from '../utils/logger.js';
import { 
  getMaxDurability, 
  calculateDurabilityLoss, 
  isRodBroken, 
  getDurabilityEfficiency,
  getDurabilityEmoji,
  getDurabilityStatus 
} from '../utils/durabilityManager.js';

export default {
  data: new SlashCommandBuilder().setName('fish').setDescription('C√¢u c√° üé£'),
  prefixEnabled: true, // Cho ph√©p s·ª≠ d·ª•ng v·ªõi prefix

  async execute(interaction) {
    const discordId = interaction.user.id;
    
    // Ki·ªÉm tra cooldown
    const cooldownCheck = checkFishingCooldown(discordId);
    if (cooldownCheck.isOnCooldown) {
      return interaction.reply({
        content: `‚è∞ **B·∫°n ƒëang trong th·ªùi gian ch·ªù!**\n\nüé£ B·∫°n c√≥ th·ªÉ c√¢u c√° l·∫°i sau: **${formatCooldownTime(cooldownCheck.remainingTime)}**\n\nüí° *H√£y ho√†n th√†nh l·∫ßn c√¢u c√° tr∆∞·ªõc ƒë√≥ ho·∫∑c ƒë·ª£i cooldown h·∫øt!*`,
        ephemeral: true
      });
    }

    let user = await User.findOne({ discordId });
    if (!user) {
      user = await User.create({ 
        discordId,
        fishingStats: {
          totalFishingAttempts: 0,
          successfulCatches: 0,
          missedCatches: 0
        }
      });
    }

    // ƒê·∫£m b·∫£o fishingStats t·ªìn t·∫°i
    if (!user.fishingStats) {
      user.fishingStats = {
        totalFishingAttempts: 0,
        successfulCatches: 0,
        missedCatches: 0
      };
      await user.save();
    }

    // ƒê·∫£m b·∫£o durability t·ªìn t·∫°i v√† c·∫≠p nh·∫≠t theo rod level
    const maxDurability = getMaxDurability(user.rodLevel || 1);
    if (user.rodDurability === undefined || user.rodMaxDurability === undefined) {
      user.rodDurability = maxDurability;
      user.rodMaxDurability = maxDurability;
      await user.save();
    }

    // Ki·ªÉm tra n·∫øu c·∫ßn c√¢u b·ªã h·ªèng
    if (isRodBroken(user.rodDurability)) {
      clearFishingCooldown(discordId);
      return interaction.reply({
        content: `üí• **C·∫ßn c√¢u ƒë√£ h·ªèng!**\n\nüîß B·∫°n c·∫ßn s·ª≠a ch·ªØa c·∫ßn c√¢u tr∆∞·ªõc khi c√≥ th·ªÉ c√¢u c√°.\nüí∞ S·ª≠ d·ª•ng l·ªánh \`/repair\` ƒë·ªÉ s·ª≠a ch·ªØa.\n\n‚ö†Ô∏è *Kh√¥ng th·ªÉ c√¢u c√° v·ªõi c·∫ßn b·ªã h·ªèng!*`,
        ephemeral: true
      });
    }

    // Ki·ªÉm tra ph√≠ c√¢u c√° (sau 5 l·∫ßn ƒë·∫ßu mi·ªÖn ph√≠)
    const FISHING_FEE = 10;
    const FREE_ATTEMPTS = 5;
    const totalAttempts = user.fishingStats?.totalFishingAttempts || 0;
    
    if (totalAttempts >= FREE_ATTEMPTS && user.balance < FISHING_FEE) {
      clearFishingCooldown(discordId); // X√≥a cooldown n·∫øu kh√¥ng ƒë·ªß ti·ªÅn
      return interaction.reply({
        content: `üí∞ **Kh√¥ng ƒë·ªß xu ƒë·ªÉ c√¢u c√°!**\n\nüé£ Ph√≠ c√¢u c√°: **${FISHING_FEE} xu**\nüí≥ S·ªë d∆∞ hi·ªán t·∫°i: **${user.balance} xu**\n\nüí° *5 l·∫ßn ƒë·∫ßu ti√™n l√† mi·ªÖn ph√≠! B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt.*`,
        ephemeral: true
      });
    }

    // Tr·ª´ ph√≠ n·∫øu kh√¥ng ph·∫£i l·∫ßn mi·ªÖn ph√≠
    if (totalAttempts >= FREE_ATTEMPTS) {
      user.balance -= FISHING_FEE;
      await user.save();
    }

    const clicksNeeded = Math.floor(Math.random() * 3) + 2;

    // ƒê·∫∑t cooldown ngay khi b·∫Øt ƒë·∫ßu c√¢u c√°
    setFishingCooldown(discordId, 20); // 20 gi√¢y cooldown

    const feeInfo = totalAttempts >= FREE_ATTEMPTS ? `üí∞ Ph√≠: ${FISHING_FEE} xu` : `üÜì Mi·ªÖn ph√≠ (${FREE_ATTEMPTS - totalAttempts} l·∫ßn c√≤n l·∫°i)`;
    
    // Hi·ªÉn th·ªã th√¥ng tin ƒë·ªô b·ªÅn
    const durabilityEmoji = getDurabilityEmoji(user.rodDurability, user.rodMaxDurability);
    const durabilityPercent = Math.round((user.rodDurability / user.rodMaxDurability) * 100);
    const durabilityInfo = `${durabilityEmoji} ƒê·ªô b·ªÅn: ${user.rodDurability}/${user.rodMaxDurability} (${durabilityPercent}%)`;

    const msg = await interaction.reply({
      content: `üé£ Nh·∫•n **${clicksNeeded} l·∫ßn** ƒë·ªÉ c√¢u c√°!\n${feeInfo}\n${durabilityInfo}\n‚è∞ *Cooldown: 20 gi√¢y*`,
      components: [getFishButtons()],
      fetchReply: true
    });

    const collector = msg.createMessageComponentCollector({
      filter: (i) => i.user.id === discordId,
      time: 30000 // TƒÉng t·ª´ 10s l√™n 30s
    });

    let clicks = 0;
    collector.on('collect', async (btn) => {
      if (btn.customId === 'fish_click') {
        clicks++;
        console.log(`üé£ ${interaction.user.username} ƒë√£ click ${clicks}/${clicksNeeded}`);
        
        await btn.update({ 
          content: `üé£ ƒê√£ k√©o ${clicks}/${clicksNeeded} l·∫ßn!\n‚è∞ *Cooldown: 20 gi√¢y*`, 
          components: [getFishButtons()] 
        });
        
        if (clicks >= clicksNeeded) {
          console.log(`‚úÖ ${interaction.user.username} ƒë√£ click ƒë·ªß, d·ª´ng collector`);
          // X√≥a cooldown ngay khi ho√†n th√†nh
          clearFishingCooldown(discordId);
          collector.stop('caught');
        }
      } else if (btn.customId === 'fish_cancel') {
        // X√≥a cooldown khi cancel
        clearFishingCooldown(discordId);
        console.log(`‚ùå ${interaction.user.username} ƒë√£ h·ªßy c√¢u c√°`);
        await btn.update({ content: 'üö´ ƒê√£ h·ªßy c√¢u c√°. Cooldown ƒë√£ ƒë∆∞·ª£c x√≥a.', components: [] });
        collector.stop('cancel');
      }
    });

    collector.on('end', async (_, reason) => {
      console.log(`üîö Collector ended v·ªõi reason: ${reason} cho user ${interaction.user.username}`);
      
      if (reason === 'caught') {
        // C·∫≠p nh·∫≠t th·ªëng k√™ c√¢u c√°
        user.fishingStats.totalFishingAttempts = (user.fishingStats.totalFishingAttempts || 0) + 1;

        // T√≠nh t·ª∑ l·ªá c√¢u h·ª•t (20% base, gi·∫£m theo rod level)
        const baseMissRate = 0.20; // 20% c∆° b·∫£n
        const rodLevel = user.rodLevel || 1;
        const missRateReduction = (rodLevel - 1) * 0.02; // Gi·∫£m 2% m·ªói level
        let finalMissRate = Math.max(baseMissRate - missRateReduction, 0.05); // T·ªëi thi·ªÉu 5%
        
        // √Åp d·ª•ng h·ªá s·ªë hi·ªáu su·∫•t t·ª´ ƒë·ªô b·ªÅn
        const efficiency = getDurabilityEfficiency(user.rodDurability, user.rodMaxDurability);
        finalMissRate = finalMissRate * (2 - efficiency); // ƒê·ªô b·ªÅn th·∫•p tƒÉng t·ª∑ l·ªá h·ª•t
        finalMissRate = Math.min(finalMissRate, 0.8); // T·ªëi ƒëa 80% h·ª•t
        
        const missRatePercent = (finalMissRate * 100).toFixed(1);
        
        const isMiss = Math.random() < finalMissRate;
        
        // T√≠nh ƒë·ªô hao m√≤n c·∫ßn c√¢u
        const durabilityLoss = calculateDurabilityLoss(rodLevel, isMiss);
        user.rodDurability = Math.max(0, user.rodDurability - durabilityLoss);
        
        if (isMiss) {
          // C√¢u h·ª•t
          console.log(`‚ùå ${interaction.user.username} c√¢u h·ª•t (${missRatePercent}%)`);
          user.fishingStats.missedCatches = (user.fishingStats.missedCatches || 0) + 1;
          await user.save();
          
          // Log c√¢u h·ª•t
          await logFishing(interaction.user, null, true);
          
          // X√≥a cooldown
          clearFishingCooldown(discordId);
          
          const missMessages = [
            'üé£ C√° ƒë√£ tho√°t! B·∫°n c√¢u h·ª•t r·ªìi.',
            'üêü Kh√¥ng c√≥ c√° n√†o c·∫Øn c√¢u l·∫ßn n√†y.',
            '‚ö° C√° qu√° nhanh, b·∫°n ƒë√£ b·ªè l·ª°!',
            'üåä N∆∞·ªõc ƒë·ªông qu√° m·∫°nh, c√¢u h·ª•t!',
            'üéØ Ch∆∞a ƒë·ªß may m·∫Øn l·∫ßn n√†y.'
          ];
          
          const randomMessage = missMessages[Math.floor(Math.random() * missMessages.length)];
          
          // Th√¥ng b√°o v·ªÅ ƒë·ªô b·ªÅn
          const durabilityWarning = user.rodDurability <= 20 ? '\n‚ö†Ô∏è **C·∫£nh b√°o:** C·∫ßn c√¢u s·∫Øp h·ªèng!' : '';
          const brokenWarning = user.rodDurability <= 0 ? '\nüí• **C·∫ßn c√¢u ƒë√£ h·ªèng!** S·ª≠ d·ª•ng `/repair` ƒë·ªÉ s·ª≠a ch·ªØa.' : '';
          
          await interaction.editReply({
            content: `${randomMessage}\n\nüìä T·ª∑ l·ªá c√¢u h·ª•t: **${missRatePercent}%**\nüîß ƒê·ªô b·ªÅn gi·∫£m: **${durabilityLoss}**\nüí° N√¢ng c·∫•p c·∫ßn c√¢u ƒë·ªÉ gi·∫£m t·ª∑ l·ªá c√¢u h·ª•t!${durabilityWarning}${brokenWarning}`,
            components: []
          });
          return;
        }
        
        // C√¢u th√†nh c√¥ng
        console.log(`‚úÖ ${interaction.user.username} c√¢u th√†nh c√¥ng!`);
        user.fishingStats.successfulCatches = (user.fishingStats.successfulCatches || 0) + 1;
        
        // S·ª≠ d·ª•ng h·ªá th·ªëng c√¢u c√° m·ªõi v·ªõi weight
        const fish = selectRandomFish(rodLevel);

        const fishCount = user.fish.get(fish.name) || 0;
        user.fish.set(fish.name, fishCount + 1);
        await user.save();

        // Log c√¢u c√° th√†nh c√¥ng
        await logFishing(interaction.user, fish, false);

        // C·∫≠p nh·∫≠t quest progress
        await updateQuestProgress(discordId, 'fish', 1);
        
        // Ki·ªÉm tra n·∫øu l√† c√° hi·∫øm ƒë·ªÉ c·∫≠p nh·∫≠t quest fish_rare
        const isRareFish = fish.rarity !== 'common';
        if (isRareFish) {
          await updateQuestProgress(discordId, 'fish_rare', 1, { isRare: true });
        }

        // C·∫≠p nh·∫≠t th·ªëng k√™ to√†n c·ª•c
        try {
          let globalStats = await GlobalStats.findOne({ statsId: 'global' });
          if (!globalStats) {
            globalStats = await GlobalStats.create({ statsId: 'global' });
          }
          
          const currentCount = globalStats.totalFishCaught.get(fish.name) || 0;
          globalStats.totalFishCaught.set(fish.name, currentCount + 1);
          globalStats.lastUpdated = new Date();
          await globalStats.save();
        } catch (error) {
          console.error('Error updating global stats:', error);
        }

        // Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi emoji rarity
        const rarityEmoji = {
          'common': 'üêü',
          'rare': 'üê†', 
          'legendary': 'üêã',
          'mythical': '‚≠ê'
        };
        
        const emoji = rarityEmoji[fish.rarity] || 'üêü';
        let message = `${emoji} B·∫°n ƒë√£ b·∫Øt ƒë∆∞·ª£c **${fish.name}** (üí∞ ${fish.price} xu)!`;
        
        // Th√™m th√¥ng b√°o ƒë·∫∑c bi·ªát cho c√° hi·∫øm
        if (fish.rarity === 'mythical') {
          message += '\nüéâ **C·ª∞C HI·∫æM!** B·∫°n ƒë√£ c√¢u ƒë∆∞·ª£c c√° huy·ªÅn tho·∫°i! üéâ';
        } else if (fish.rarity === 'legendary') {
          message += '\n‚ú® **HI·∫æM!** C√° huy·ªÅn tho·∫°i ƒë√£ xu·∫•t hi·ªán!';
        } else if (fish.rarity === 'rare') {
          message += '\nüíé C√° hi·∫øm ƒë·∫•y!';
        }

        // Th√¥ng b√°o v·ªÅ ƒë·ªô b·ªÅn
        const durabilityWarning = user.rodDurability <= 20 ? '\n‚ö†Ô∏è **C·∫£nh b√°o:** C·∫ßn c√¢u s·∫Øp h·ªèng!' : '';
        const brokenWarning = user.rodDurability <= 0 ? '\nüí• **C·∫ßn c√¢u ƒë√£ h·ªèng!** S·ª≠ d·ª•ng `/repair` ƒë·ªÉ s·ª≠a ch·ªØa.' : '';
        
        message += `\nüîß ƒê·ªô b·ªÅn gi·∫£m: **${durabilityLoss}**${durabilityWarning}${brokenWarning}`;

        await interaction.editReply({ content: message, components: [] });
        
        // X√≥a cooldown khi ho√†n th√†nh th√†nh c√¥ng
        clearFishingCooldown(discordId);
        
        console.log(`‚úÖ ${interaction.user.username} ƒë√£ c√¢u ƒë∆∞·ª£c ${fish.name}, cooldown ƒë√£ ƒë∆∞·ª£c x√≥a`);
      } else if (reason !== 'cancel') {
        // Timeout - t√≠nh l√† c√¢u h·ª•t v√† c·∫≠p nh·∫≠t stats
        user.fishingStats.totalFishingAttempts = (user.fishingStats.totalFishingAttempts || 0) + 1;
        user.fishingStats.missedCatches = (user.fishingStats.missedCatches || 0) + 1;
        await user.save();
        
        // X√≥a cooldown
        clearFishingCooldown(discordId);
        await interaction.editReply({ 
          content: '‚è∞ **H·∫øt th·ªùi gian c√¢u c√°!**\n\nüé£ C√° ƒë√£ b∆°i m·∫•t r·ªìi... Th·ª≠ l·∫°i nh√©!\nüí° *Cooldown ƒë√£ ƒë∆∞·ª£c x√≥a*', 
          components: [] 
        });
      }
    });
  }
};
