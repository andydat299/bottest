import { SlashCommandBuilder, EmbedBuilder } from 'discord.js';
import { getOrCreateVIP, getVIPPerks } from '../utils/vip.js';
import { User } from '../schemas/userSchema.js';

function getTodayDateString() {
  const now = new Date();
  return `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;
}

export default {
  data: new SlashCommandBuilder()
    .setName('auto-fishing')
    .setDescription('üé£ T·ª± ƒë·ªông c√¢u c√° (ch·ªâ d√†nh cho VIP)')
    .addIntegerOption(option =>
      option.setName('duration')
        .setDescription('Th·ªùi gian t·ª± ƒë·ªông c√¢u (ph√∫t)')
        .setRequired(false)
        .setMinValue(1)
        .setMaxValue(720)),
  async execute(interaction) {
    try {
      // Ki·ªÉm tra VIP
      const vip = await getOrCreateVIP(interaction.user.id, interaction.user.username);
      if (!vip || !vip.isVipActive()) {
        await interaction.reply({
          content: '‚ùå Ch·ªâ th√†nh vi√™n VIP m·ªõi ƒë∆∞·ª£c s·ª≠ d·ª•ng auto-fishing. H√£y mua VIP t·∫°i `/vip-shop`!',
          ephemeral: true
        });
        return;
      }

      const vipPerks = getVIPPerks(vip);
      const maxDuration = vipPerks.autoFishingTime;
      const todayKey = getTodayDateString();

      // L·∫•y user t·ª´ schema hi·ªán c√≥
      let user = await User.findOne({ discordId: interaction.user.id });
      if (!user) {
        await interaction.reply({
          content: '‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin user. H√£y s·ª≠ d·ª•ng l·ªánh kh√°c tr∆∞·ªõc!',
          ephemeral: true
        });
        return;
      }

      // Kh·ªüi t·∫°o ho·∫∑c reset autoFishingToday n·∫øu sang ng√†y m·ªõi
      if (!user.autoFishingToday || user.autoFishingToday.date !== todayKey) {
        user.autoFishingToday = { date: todayKey, minutes: 0 };
      }

      // Ki·ªÉm tra quota
      const usedToday = user.autoFishingToday.minutes;
      if (usedToday >= maxDuration) {
        await interaction.reply({
          content: `‚ùå B·∫°n ƒë√£ d√πng h·∫øt ${maxDuration} ph√∫t auto-fishing cho h√¥m nay. H√£y quay l·∫°i v√†o ng√†y mai!`,
          ephemeral: true
        });
        return;
      }

      // X√°c ƒë·ªãnh th·ªùi l∆∞·ª£ng h·ª£p l·ªá
      const requestedDuration = interaction.options.getInteger('duration') || 10;
      const available = maxDuration - usedToday;
      const duration = Math.min(requestedDuration, available);

      // Simulate auto-fishing v·ªõi logic gi·ªëng l·ªánh fish hi·ªán c√≥
      const fishCaught = Math.floor(Math.random() * (duration * 2)) + duration;
      const baseCoinsPerFish = Math.floor(Math.random() * 50) + 25;
      let coinsEarned = fishCaught * baseCoinsPerFish;
      
      // √Åp d·ª•ng VIP bonus
      coinsEarned = Math.floor(coinsEarned * vipPerks.coinMultiplier);

      // C·∫≠p nh·∫≠t coins cho user (gi·ªØ logic c≈©)
      user.money = (user.money || 0) + coinsEarned;
      user.fish = user.fish || new Map();
      
      // Th√™m c√° v√†o inventory (gi·ªØ logic c≈©)
      const fishTypes = ['C√° ch√©p', 'C√° r√¥', 'C√° tr·∫Øm', 'C√° l√≥c'];
      for (let i = 0; i < fishCaught; i++) {
        const fishType = fishTypes[Math.floor(Math.random() * fishTypes.length)];
        user.fish.set(fishType, (user.fish.get(fishType) || 0) + 1);
      }

      // C·∫≠p nh·∫≠t quota auto-fishing
      user.autoFishingToday.minutes += duration;
      await user.save();

      // K·∫øt qu·∫£
      const embed = new EmbedBuilder()
        .setTitle('üé£ T·ª± ƒê·ªông C√¢u C√°')
        .setDescription(`ƒê√£ ho√†n th√†nh ${duration} ph√∫t t·ª± ƒë·ªông c√¢u c√°!`)
        .setColor(vipPerks.color)
        .addFields(
          { name: 'üêü C√° ƒë√£ c√¢u', value: `${fishCaught} con`, inline: true },
          { name: 'üí∞ Ti·ªÅn ki·∫øm ƒë∆∞·ª£c', value: `${coinsEarned.toLocaleString()} coins`, inline: true },
          { name: '‚è±Ô∏è Th·ªùi gian', value: `${duration} ph√∫t`, inline: true },
          { name: 'üïí ƒê√£ d√πng h√¥m nay', value: `${user.autoFishingToday.minutes}/${maxDuration} ph√∫t`, inline: true },
          { name: 'üëë VIP Tier', value: vipPerks.tier, inline: true },
          { name: 'üü¢ Quota c√≤n l·∫°i', value: `${Math.max(0, maxDuration - user.autoFishingToday.minutes)} ph√∫t`, inline: true }
        )
        .setFooter({ text: `${vipPerks.tier} - Coin bonus x${vipPerks.coinMultiplier}` })
        .setTimestamp();

      if (requestedDuration > available) {
        embed.addFields({
          name: '‚ö†Ô∏è Gi·ªõi h·∫°n th·ªùi gian',
          value: `B·∫°n ch·ªâ c√≤n ${available} ph√∫t auto-fishing cho h√¥m nay.`,
          inline: false
        });
      }

      await interaction.reply({ embeds: [embed] });

    } catch (error) {
      console.error('Auto-fishing command error:', error);
      await interaction.reply({
        content: '‚ùå C√≥ l·ªói x·∫£y ra v·ªõi t·ª± ƒë·ªông c√¢u c√°. Vui l√≤ng th·ª≠ l·∫°i!',
        ephemeral: true
      });
    }
  }
};