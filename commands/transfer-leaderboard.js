import { SlashCommandBuilder, EmbedBuilder } from 'discord.js';
import mongoose from 'mongoose';

export default {
  data: new SlashCommandBuilder()
    .setName('transfer-leaderboard')
    .setDescription('üèÜ Xem b·∫£ng x·∫øp h·∫°ng chuy·ªÉn ti·ªÅn')
    .addStringOption(option =>
      option.setName('category')
        .setDescription('Lo·∫°i b·∫£ng x·∫øp h·∫°ng')
        .setRequired(false)
        .addChoices(
          { name: 'üëë Ng∆∞·ªùi g·ª≠i nhi·ªÅu nh·∫•t', value: 'top_senders' },
          { name: 'üíé Ng∆∞·ªùi nh·∫≠n nhi·ªÅu nh·∫•t', value: 'top_receivers' },
          { name: 'üéØ Ho·∫°t ƒë·ªông t√≠ch c·ª±c', value: 'most_active' },
          { name: 'üí∞ Gi√° tr·ªã giao d·ªãch cao', value: 'highest_transfers' }
        )),

  async execute(interaction) {
    try {
      await interaction.deferReply();

      const category = interaction.options.getString('category') || 'top_senders';

      // Database access
      const db = mongoose.connection.db;
      const transfersCollection = db.collection('transfers');

      let leaderboard = [];
      let title = '';
      let description = '';
      let color = '#FFD700';

      switch (category) {
        case 'top_senders':
          title = 'üëë Top Ng∆∞·ªùi G·ª≠i Xu';
          description = '**Nh·ªØng ng∆∞·ªùi g·ª≠i xu nhi·ªÅu nh·∫•t:**';
          
          leaderboard = await transfersCollection.aggregate([
            {
              $group: {
                _id: { id: '$senderId', username: '$senderUsername' },
                totalSent: { $sum: '$amount' },
                totalFees: { $sum: '$fee' },
                transferCount: { $sum: 1 }
              }
            },
            { $sort: { totalSent: -1 } },
            { $limit: 10 }
          ]).toArray();
          break;

        case 'top_receivers':
          title = 'üíé Top Ng∆∞·ªùi Nh·∫≠n Xu';
          description = '**Nh·ªØng ng∆∞·ªùi nh·∫≠n xu nhi·ªÅu nh·∫•t:**';
          color = '#9B59B6';
          
          leaderboard = await transfersCollection.aggregate([
            {
              $group: {
                _id: { id: '$recipientId', username: '$recipientUsername' },
                totalReceived: { $sum: '$amountReceived' },
                receiveCount: { $sum: 1 }
              }
            },
            { $sort: { totalReceived: -1 } },
            { $limit: 10 }
          ]).toArray();
          break;

        case 'most_active':
          title = 'üéØ Ho·∫°t ƒê·ªông T√≠ch C·ª±c';
          description = '**Nh·ªØng ng∆∞·ªùi tham gia chuy·ªÉn ti·ªÅn nhi·ªÅu nh·∫•t:**';
          color = '#E74C3C';
          
          // Get both sent and received counts
          const senders = await transfersCollection.aggregate([
            { $group: { _id: { id: '$senderId', username: '$senderUsername' }, count: { $sum: 1 } } }
          ]).toArray();
          
          const receivers = await transfersCollection.aggregate([
            { $group: { _id: { id: '$recipientId', username: '$recipientUsername' }, count: { $sum: 1 } } }
          ]).toArray();
          
          // Combine and calculate total activity
          const activityMap = {};
          [...senders, ...receivers].forEach(item => {
            const key = item._id.id;
            if (!activityMap[key]) {
              activityMap[key] = { 
                username: item._id.username, 
                totalActivity: 0 
              };
            }
            activityMap[key].totalActivity += item.count;
          });
          
          leaderboard = Object.entries(activityMap)
            .map(([id, data]) => ({ _id: { id, username: data.username }, totalActivity: data.totalActivity }))
            .sort((a, b) => b.totalActivity - a.totalActivity)
            .slice(0, 10);
          break;

        case 'highest_transfers':
          title = 'üí∞ Giao D·ªãch Gi√° Tr·ªã Cao';
          description = '**Nh·ªØng giao d·ªãch c√≥ gi√° tr·ªã cao nh·∫•t:**';
          color = '#F39C12';
          
          leaderboard = await transfersCollection
            .find({})
            .sort({ amount: -1 })
            .limit(10)
            .toArray();
          break;
      }

      if (leaderboard.length === 0) {
        await interaction.editReply({
          content: [
            'üèÜ **B·∫£ng X·∫øp H·∫°ng Chuy·ªÉn Ti·ªÅn**',
            '',
            '‚ùå **Ch∆∞a c√≥ d·ªØ li·ªáu.**',
            '',
            'üí° H√£y s·ª≠ d·ª•ng `/transfer` ƒë·ªÉ b·∫Øt ƒë·∫ßu chuy·ªÉn xu!'
          ].join('\n')
        });
        return;
      }

      // Create embed
      const embed = new EmbedBuilder()
        .setTitle(title)
        .setDescription(description)
        .setColor(color)
        .setTimestamp();

      // Format leaderboard based on category
      let leaderboardText = '';
      
      if (category === 'highest_transfers') {
        // Single transfers
        for (let i = 0; i < leaderboard.length; i++) {
          const transfer = leaderboard[i];
          const rank = getRankEmoji(i + 1);
          const date = new Date(transfer.createdAt).toLocaleDateString();
          
          leaderboardText += `${rank} **${transfer.amount.toLocaleString()} xu**\n`;
          leaderboardText += `   üë§ ${transfer.senderUsername} ‚Üí ${transfer.recipientUsername}\n`;
          leaderboardText += `   üìÖ ${date}\n\n`;
        }
      } else {
        // Aggregated data
        for (let i = 0; i < leaderboard.length; i++) {
          const user = leaderboard[i];
          const rank = getRankEmoji(i + 1);
          
          leaderboardText += `${rank} **${user._id.username}**\n`;
          
          if (category === 'top_senders') {
            leaderboardText += `   üí∞ G·ª≠i: ${user.totalSent.toLocaleString()} xu (${user.transferCount} l·∫ßn)\n`;
            leaderboardText += `   üí∏ Ph√≠: ${user.totalFees.toLocaleString()} xu\n\n`;
          } else if (category === 'top_receivers') {
            leaderboardText += `   üíé Nh·∫≠n: ${user.totalReceived.toLocaleString()} xu (${user.receiveCount} l·∫ßn)\n\n`;
          } else if (category === 'most_active') {
            leaderboardText += `   üéØ Ho·∫°t ƒë·ªông: ${user.totalActivity} giao d·ªãch\n\n`;
          }
        }
      }

      embed.addFields({ name: 'üìä B·∫£ng X·∫øp H·∫°ng', value: leaderboardText, inline: false });

      // Add overall statistics
      const totalTransfers = await transfersCollection.countDocuments({});
      const totalVolume = await transfersCollection.aggregate([
        { $group: { _id: null, total: { $sum: '$amount' } } }
      ]).toArray();
      
      const statsText = [
        `üìä **T·ªïng giao d·ªãch:** ${totalTransfers.toLocaleString()}`,
        `üí∞ **T·ªïng kh·ªëi l∆∞·ª£ng:** ${(totalVolume[0]?.total || 0).toLocaleString()} xu`,
        `üèÜ **Top ${leaderboard.length} hi·ªÉn th·ªã**`
      ].join('\n');

      embed.addFields({ name: 'üìà Th·ªëng K√™ Chung', value: statsText, inline: false });

      embed.setFooter({ text: 'D·ªØ li·ªáu c·∫≠p nh·∫≠t realtime ‚Ä¢ S·ª≠ d·ª•ng /transfer ƒë·ªÉ tham gia!' });

      await interaction.editReply({ embeds: [embed] });

    } catch (error) {
      console.error('Transfer leaderboard command error:', error);
      await interaction.editReply({
        content: '‚ùå **C√≥ l·ªói x·∫£y ra khi t·∫£i b·∫£ng x·∫øp h·∫°ng!**\n\nVui l√≤ng th·ª≠ l·∫°i sau.'
      });
    }
  }
};

function getRankEmoji(rank) {
  const emojis = {
    1: 'ü•á',
    2: 'ü•à', 
    3: 'ü•â',
    4: '4Ô∏è‚É£',
    5: '5Ô∏è‚É£',
    6: '6Ô∏è‚É£',
    7: '7Ô∏è‚É£',
    8: '8Ô∏è‚É£',
    9: '9Ô∏è‚É£',
    10: 'üîü'
  };
  return emojis[rank] || `${rank}Ô∏è‚É£`;
}