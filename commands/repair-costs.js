·ªán t√¥i import { SlashCommandBuilder, EmbedBuilder } from 'discord.js';
import { getRepairCost, getAllRepairCosts, getDurabilityColor, getDurabilityEmoji } from '../utils/repairUtils.js';

export default {
  data: new SlashCommandBuilder()
    .setName('repair-costs')
    .setDescription('üí∞ Xem b·∫£ng gi√° s·ª≠a ch·ªØa c·∫ßn c√¢u')
    .addIntegerOption(option =>
      option.setName('level')
        .setDescription('Xem gi√° cho level c·ª• th·ªÉ (1-10)')
        .setRequired(false)
        .setMinValue(1)
        .setMaxValue(10)),
  async execute(interaction) {
    try {
      const specificLevel = interaction.options.getInteger('level');

      if (specificLevel) {
        // Hi·ªÉn th·ªã gi√° cho level c·ª• th·ªÉ
        await showSpecificLevelCost(interaction, specificLevel);
      } else {
        // Hi·ªÉn th·ªã b·∫£ng gi√° ƒë·∫ßy ƒë·ªß
        await showAllRepairCosts(interaction);
      }

    } catch (error) {
      console.error('Repair costs command error:', error);
      await interaction.reply({
        content: '‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin gi√° s·ª≠a ch·ªØa!',
        flags: 64
      });
    }
  }
};

async function showAllRepairCosts(interaction) {
  const allCosts = getAllRepairCosts();
  
  const embed = new EmbedBuilder()
    .setTitle('üí∞ B·∫£ng Gi√° S·ª≠a Ch·ªØa C·∫ßn C√¢u')
    .setDescription('**Chi ph√≠ s·ª≠a ch·ªØa cho t·ª´ng level c·∫ßn c√¢u:**')
    .setColor('#3498db')
    .setTimestamp();

  // T·∫°o danh s√°ch gi√° v·ªõi emoji v√† m√†u s·∫Øc
  let costList = '';
  let totalCost = 0;
  
  for (let level = 1; level <= 10; level++) {
    const cost = getRepairCost(level);
    const emoji = level <= 3 ? 'üü¢' : level <= 6 ? 'üü°' : level <= 8 ? 'üü†' : 'üî¥';
    const tier = level <= 3 ? 'D·ªÖ' : level <= 6 ? 'Trung b√¨nh' : level <= 8 ? 'Kh√≥' : 'C·ª±c kh√≥';
    
    costList += `${emoji} **Level ${level}** (${tier}): **${cost.toLocaleString()}** xu\n`;
    totalCost += cost;
  }

  embed.addFields(
    { name: 'üìä Chi Ph√≠ Theo Level', value: costList, inline: false },
    { name: 'üìà Th·ªëng K√™ T·ªïng Quan', value: [
      `üí∏ **Gi√° r·∫ª nh·∫•t:** ${Math.min(...Object.values(allCosts)).toLocaleString()} xu (Level 1)`,
      `üíé **Gi√° ƒë·∫Øt nh·∫•t:** ${Math.max(...Object.values(allCosts)).toLocaleString()} xu (Level 10)`,
      `üßÆ **T·ªïng chi ph√≠ (1‚Üí10):** ${totalCost.toLocaleString()} xu`,
      `üìä **T·ª∑ l·ªá tƒÉng:** x${(Math.max(...Object.values(allCosts)) / Math.min(...Object.values(allCosts))).toFixed(1)}`
    ].join('\n'), inline: false },
    { name: 'üí° L∆∞u √ù', value: [
      'üîß Gi√° s·ª≠a ch·ªØa ph·ª• thu·ªôc v√†o level c·∫ßn c√¢u',
      '‚ö° Level cao h∆°n = Chi ph√≠ s·ª≠a ch·ªØa cao h∆°n',
      'üí∞ S·ª≠ d·ª•ng `/repair` ƒë·ªÉ s·ª≠a ch·ªØa c·∫ßn c√¢u',
      'üì± D√πng `/repair-costs level:X` ƒë·ªÉ xem chi ti·∫øt level c·ª• th·ªÉ'
    ].join('\n'), inline: false }
  );

  embed.setFooter({ text: 'Gi√° c√≥ th·ªÉ thay ƒë·ªïi theo quy·∫øt ƒë·ªãnh c·ªßa admin' });

  await interaction.reply({ embeds: [embed] });
}

async function showSpecificLevelCost(interaction, level) {
  const cost = getRepairCost(level);
  const maxDurability = level * 10;
  
  // T√≠nh to√°n statistics cho level n√†y
  const allCosts = getAllRepairCosts();
  const avgCost = Object.values(allCosts).reduce((a, b) => a + b, 0) / Object.keys(allCosts).length;
  const costRank = Object.values(allCosts).filter(c => c <= cost).length;
  
  const embed = new EmbedBuilder()
    .setTitle(`üé£ Chi Ph√≠ S·ª≠a Ch·ªØa - Level ${level}`)
    .setDescription(`**Th√¥ng tin chi ti·∫øt cho c·∫ßn c√¢u Level ${level}**`)
    .setColor(getDurabilityColor(level * 10))
    .setTimestamp();

  // Th√¥ng tin c∆° b·∫£n
  embed.addFields(
    { name: 'üí∞ Gi√° S·ª≠a Ch·ªØa', value: `**${cost.toLocaleString()}** xu`, inline: true },
    { name: 'üõ°Ô∏è ƒê·ªô B·ªÅn T·ªëi ƒêa', value: `${maxDurability} ƒëi·ªÉm`, inline: true },
    { name: 'üè∑Ô∏è H·∫°ng Gi√°', value: `${costRank}/10 (${costRank <= 3 ? 'R·∫ª' : costRank <= 7 ? 'Trung b√¨nh' : 'ƒê·∫Øt'})`, inline: true }
  );

  // So s√°nh v·ªõi levels kh√°c
  const prevCost = level > 1 ? getRepairCost(level - 1) : 0;
  const nextCost = level < 10 ? getRepairCost(level + 1) : 0;
  
  let comparison = '';
  if (level > 1) {
    const increase = cost - prevCost;
    const percentage = ((increase / prevCost) * 100).toFixed(1);
    comparison += `üìà **Level ${level-1} ‚Üí ${level}:** +${increase.toLocaleString()} xu (+${percentage}%)\n`;
  }
  if (level < 10) {
    const increase = nextCost - cost;
    const percentage = ((increase / cost) * 100).toFixed(1);
    comparison += `üìä **Level ${level} ‚Üí ${level+1}:** +${increase.toLocaleString()} xu (+${percentage}%)\n`;
  }

  if (comparison) {
    embed.addFields({ name: 'üîÑ So S√°nh Level', value: comparison, inline: false });
  }

  // Th·ªëng k√™ chi ti·∫øt
  embed.addFields(
    { name: 'üìä Th·ªëng K√™ Chi Ti·∫øt', value: [
      `üíµ **So v·ªõi gi√° trung b√¨nh:** ${cost > avgCost ? `+${(cost - avgCost).toFixed(0)}` : `-${(avgCost - cost).toFixed(0)}`} xu`,
      `üéØ **Cost per durability:** ${(cost / maxDurability).toFixed(1)} xu/ƒëi·ªÉm`,
      `‚ö° **Efficiency rating:** ${level <= 3 ? '‚≠ê‚≠ê‚≠ê' : level <= 6 ? '‚≠ê‚≠ê' : '‚≠ê'} (cost/benefit)`,
      `üèÜ **Recommended for:** ${level <= 5 ? 'Ng∆∞·ªùi m·ªõi' : level <= 8 ? 'Trung c·∫•p' : 'Chuy√™n gia'}`
    ].join('\n'), inline: false }
  );

  // Tips cho level n√†y
  let tips = '';
  if (level <= 3) {
    tips = 'üí° **Tips:** Gi√° r·∫ª, ph√π h·ª£p ƒë·ªÉ h·ªçc c√°ch qu·∫£n l√Ω ƒë·ªô b·ªÅn c·∫ßn c√¢u';
  } else if (level <= 6) {
    tips = 'üí° **Tips:** C√¢n nh·∫Øng gi·ªØa hi·ªáu su·∫•t v√† chi ph√≠, n√™n c√≥ d·ª± tr·ªØ xu';
  } else if (level <= 8) {
    tips = 'üí° **Tips:** Chi ph√≠ cao, h√£y c√¢u c√° c·∫©n th·∫≠n ƒë·ªÉ t·ªëi ∆∞u ƒë·ªô b·ªÅn';
  } else {
    tips = 'üí° **Tips:** Chi ph√≠ r·∫•t cao! Ch·ªâ s·ª≠a khi th·ª±c s·ª± c·∫ßn thi·∫øt';
  }

  embed.addFields({ name: 'üéØ Khuy·∫øn Ngh·ªã', value: tips, inline: false });

  embed.setFooter({ text: `D√πng /repair ƒë·ªÉ s·ª≠a ch·ªØa c·∫ßn c√¢u Level ${level}` });

  await interaction.reply({ embeds: [embed] });
}