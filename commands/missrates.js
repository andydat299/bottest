import { SlashCommandBuilder, EmbedBuilder } from 'discord.js';
import { User } from '../schemas/userSchema.js';

export default {
  data: new SlashCommandBuilder()
    .setName('missrates')
    .setDescription('Xem th√¥ng tin chi ti·∫øt v·ªÅ t·ª∑ l·ªá c√¢u h·ª•t theo rod level'),

  async execute(interaction) {
    const user = await User.findOne({ discordId: interaction.user.id }) || await User.create({ discordId: interaction.user.id });
    const currentRodLevel = user.rodLevel || 1;

    const embed = new EmbedBuilder()
      .setColor('#FF6B6B')
      .setTitle('üìä Th·ªëng k√™ t·ª∑ l·ªá c√¢u h·ª•t')
      .setDescription('T·ª∑ l·ªá c√¢u h·ª•t thay ƒë·ªïi theo c·∫•p c·∫ßn c√¢u c·ªßa b·∫°n')
      .setTimestamp()
      .setFooter({ 
        text: `${interaction.user.username} - Rod Level ${currentRodLevel}`, 
        iconURL: interaction.user.displayAvatarURL() 
      });

    // T√≠nh to√°n t·ª∑ l·ªá cho t·ª´ng rod level (1-10)
    let ratesInfo = '';
    for (let rodLevel = 1; rodLevel <= 10; rodLevel++) {
      const baseMissRate = 0.20; // 20% c∆° b·∫£n
      const missRateReduction = (rodLevel - 1) * 0.02; // Gi·∫£m 2% m·ªói level
      const finalMissRate = Math.max(baseMissRate - missRateReduction, 0.05); // T·ªëi thi·ªÉu 5%
      const missRatePercent = (finalMissRate * 100).toFixed(1);
      const successRate = (100 - parseFloat(missRatePercent)).toFixed(1);
      
      const indicator = rodLevel === currentRodLevel ? 'üëâ ' : '   ';
      const emoji = rodLevel === currentRodLevel ? 'üé£' : 'üî∏';
      
      ratesInfo += `${indicator}${emoji} **C·∫•p ${rodLevel}:** H·ª•t ${missRatePercent}% | Th√†nh c√¥ng ${successRate}%\n`;
    }

    embed.addFields({
      name: 'üéØ T·ª∑ l·ªá theo Rod Level',
      value: ratesInfo,
      inline: false
    });

    // Th·ªëng k√™ c√° nh√¢n
    const totalAttempts = user.fishingStats?.totalFishingAttempts || 0;
    const successfulCatches = user.fishingStats?.successfulCatches || 0;
    const missedCatches = user.fishingStats?.missedCatches || 0;
    const personalSuccessRate = totalAttempts > 0 ? ((successfulCatches / totalAttempts) * 100).toFixed(1) : '0.0';

    if (totalAttempts > 0) {
      embed.addFields({
        name: 'üìà Th·ªëng k√™ c√° nh√¢n',
        value: `‚Ä¢ **T·ªïng l·∫ßn c√¢u:** ${totalAttempts.toLocaleString()}\n‚Ä¢ **Th√†nh c√¥ng:** ${successfulCatches.toLocaleString()}\n‚Ä¢ **C√¢u h·ª•t:** ${missedCatches.toLocaleString()}\n‚Ä¢ **T·ª∑ l·ªá th√†nh c√¥ng th·ª±c t·∫ø:** ${personalSuccessRate}%`,
        inline: false
      });
    }

    embed.addFields({
      name: 'üí° Th√¥ng tin h·ªØu √≠ch',
      value: '‚Ä¢ **T·ª∑ l·ªá c∆° b·∫£n:** 20% c√¢u h·ª•t\n‚Ä¢ **Gi·∫£m t·ª∑ l·ªá:** -2% m·ªói rod level\n‚Ä¢ **T·ªëi thi·ªÉu:** 5% c√¢u h·ª•t (Rod level 8+)\n‚Ä¢ **N√¢ng c·∫•p c·∫ßn c√¢u** ƒë·ªÉ gi·∫£m t·ª∑ l·ªá c√¢u h·ª•t!\n‚Ä¢ Timeout c≈©ng t√≠nh l√† c√¢u h·ª•t',
      inline: false
    });

    await interaction.reply({ embeds: [embed] });
  }
};
