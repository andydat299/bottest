import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import { User } from '../schemas/userSchema.js';
import { 
  getMaxDurability, 
  calculateRepairCost, 
  isRodBroken,
  getDurabilityEmoji,
  getDurabilityStatus 
} from '../utils/durabilityManager.js';
import { logMoneySpent } from '../utils/logger.js';

export default {
  data: new SlashCommandBuilder()
    .setName('repair')
    .setDescription('S·ª≠a ch·ªØa c·∫ßn c√¢u üîß')
    .addStringOption(option =>
      option.setName('type')
        .setDescription('Lo·∫°i s·ª≠a ch·ªØa')
        .setRequired(false)
        .addChoices(
          { name: 'S·ª≠a ch·ªØa ho√†n to√†n (100%)', value: 'full' },
          { name: 'S·ª≠a ch·ªØa m·ªôt ph·∫ßn (50%)', value: 'partial' },
          { name: 'S·ª≠a ch·ªØa t·ªëi thi·ªÉu (25%)', value: 'minimal' }
        )),

  async execute(interaction) {
    const user = await User.findOne({ discordId: interaction.user.id }) || await User.create({ discordId: interaction.user.id });
    
    // ƒê·∫£m b·∫£o durability t·ªìn t·∫°i
    const maxDurability = getMaxDurability(user.rodLevel || 1);
    if (user.rodDurability === undefined || user.rodMaxDurability === undefined) {
      user.rodDurability = maxDurability;
      user.rodMaxDurability = maxDurability;
      await user.save();
    }

    const repairType = interaction.options.getString('type');
    
    // N·∫øu kh√¥ng ch·ªçn lo·∫°i s·ª≠a ch·ªØa, hi·ªÉn th·ªã menu
    if (!repairType) {
      return showRepairMenu(interaction, user);
    }

    await handleRepair(interaction, user, repairType);
  }
};

async function showRepairMenu(interaction, user) {
  const currentDurability = user.rodDurability;
  const maxDurability = user.rodMaxDurability;
  const rodLevel = user.rodLevel || 1;
  
  if (currentDurability >= maxDurability) {
    const embed = new EmbedBuilder()
      .setColor('#00FF00')
      .setTitle('üîß Tr·∫°ng th√°i c·∫ßn c√¢u')
      .setDescription('C·∫ßn c√¢u c·ªßa b·∫°n ƒëang ·ªü tr·∫°ng th√°i ho√†n h·∫£o!')
      .addFields({
        name: 'üìä Th√¥ng tin',
        value: `${getDurabilityEmoji(currentDurability, maxDurability)} **ƒê·ªô b·ªÅn:** ${currentDurability}/${maxDurability} (100%)\nüé£ **C·∫•p c·∫ßn:** ${rodLevel}\n‚úÖ **Tr·∫°ng th√°i:** Ho√†n h·∫£o`,
        inline: false
      });
    
    return interaction.reply({ embeds: [embed], ephemeral: true });
  }

  // T√≠nh chi ph√≠ cho c√°c lo·∫°i s·ª≠a ch·ªØa theo m·ª©c ƒë·ªô
  const fullRepairTarget = maxDurability;
  const partialRepairTarget = Math.min(currentDurability + Math.floor(maxDurability * 0.5), maxDurability);
  const minimalRepairTarget = Math.min(currentDurability + Math.floor(maxDurability * 0.25), maxDurability);

  const fullCost = 2000;      // Ho√†n to√†n (100%)
  const partialCost = 1500;   // M·ªôt ph·∫ßn (50%)  
  const minimalCost = 1000;   // T·ªëi thi·ªÉu (25%)

  const embed = new EmbedBuilder()
    .setColor('#FFA500')
    .setTitle('üîß S·ª≠a ch·ªØa c·∫ßn c√¢u')
    .setDescription(`Ch·ªçn lo·∫°i s·ª≠a ch·ªØa cho c·∫ßn c√¢u c·∫•p ${rodLevel} c·ªßa b·∫°n:`)
    .addFields(
      {
        name: 'üìä Tr·∫°ng th√°i hi·ªán t·∫°i',
        value: `${getDurabilityEmoji(currentDurability, maxDurability)} **ƒê·ªô b·ªÅn:** ${currentDurability}/${maxDurability} (${Math.round((currentDurability/maxDurability)*100)}%)\nüìà **Tr·∫°ng th√°i:** ${getDurabilityStatus(currentDurability, maxDurability)}\nüí∞ **S·ªë d∆∞:** ${user.balance.toLocaleString()} xu`,
        inline: false
      },
      {
        name: 'üîß T√πy ch·ªçn s·ª≠a ch·ªØa',
        value: `**üü¢ Ho√†n to√†n (100%):** 2000 xu\n**üü° M·ªôt ph·∫ßn (50%):** 1500 xu\n**üü† T·ªëi thi·ªÉu (25%):** 1000 xu`,
        inline: false
      }
    )
    .setTimestamp()
    .setFooter({ 
      text: `${interaction.user.username} - Rod Level ${rodLevel}`, 
      iconURL: interaction.user.displayAvatarURL() 
    });

  const row = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('repair_full')
        .setLabel(`Ho√†n to√†n (2000 xu)`)
        .setStyle(user.balance >= 2000 ? ButtonStyle.Success : ButtonStyle.Danger)
        .setDisabled(user.balance < 2000),
      new ButtonBuilder()
        .setCustomId('repair_partial')
        .setLabel(`M·ªôt ph·∫ßn (1500 xu)`)
        .setStyle(user.balance >= 1500 ? ButtonStyle.Primary : ButtonStyle.Danger)
        .setDisabled(user.balance < 1500),
      new ButtonBuilder()
        .setCustomId('repair_minimal')
        .setLabel(`T·ªëi thi·ªÉu (1000 xu)`)
        .setStyle(user.balance >= 1000 ? ButtonStyle.Secondary : ButtonStyle.Danger)
        .setDisabled(user.balance < 1000)
    );

  const msg = await interaction.reply({ 
    embeds: [embed], 
    components: [row],
    fetchReply: true
  });

  const collector = msg.createMessageComponentCollector({
    filter: (i) => i.user.id === interaction.user.id,
    time: 60000
  });

  collector.on('collect', async (btnInteraction) => {
    const repairType = btnInteraction.customId.replace('repair_', '');
    await handleRepair(btnInteraction, user, repairType);
    collector.stop();
  });

  collector.on('end', async (_, reason) => {
    if (reason === 'time') {
      await interaction.editReply({ 
        content: '‚è∞ H·∫øt th·ªùi gian ch·ªçn. Vui l√≤ng th·ª≠ l·∫°i!', 
        embeds: [], 
        components: [] 
      });
    }
  });
}

async function handleRepair(interaction, user, repairType) {
  const currentDurability = user.rodDurability;
  const maxDurability = user.rodMaxDurability;
  const rodLevel = user.rodLevel || 1;

  let repairAmount, cost, repairPercent;

  switch (repairType) {
    case 'full':
      repairAmount = maxDurability - currentDurability;
      cost = 2000; // Ho√†n to√†n (100%)
      repairPercent = 100;
      break;
    case 'partial':
      repairAmount = Math.floor(maxDurability * 0.5);
      cost = 1500; // M·ªôt ph·∫ßn (50%)
      repairPercent = 50;
      break;
    case 'minimal':
      repairAmount = Math.floor(maxDurability * 0.25);
      cost = 1000; // T·ªëi thi·ªÉu (25%)
      repairPercent = 25;
      break;
    default:
      return interaction.reply({ content: '‚ùå Lo·∫°i s·ª≠a ch·ªØa kh√¥ng h·ª£p l·ªá!', ephemeral: true });
  }

  if (user.balance < cost) {
    const embed = new EmbedBuilder()
      .setColor('#FF0000')
      .setTitle('‚ùå Kh√¥ng ƒë·ªß xu')
      .setDescription(`B·∫°n c·∫ßn **${cost.toLocaleString()} xu** ƒë·ªÉ s·ª≠a ch·ªØa nh∆∞ng ch·ªâ c√≥ **${user.balance.toLocaleString()} xu**.`)
      .addFields({
        name: 'üí° G·ª£i √Ω',
        value: '‚Ä¢ B√°n c√° ƒë·ªÉ c√≥ th√™m xu\n‚Ä¢ Ho√†n th√†nh quest h√†ng ng√†y\n‚Ä¢ Ch·ªçn lo·∫°i s·ª≠a ch·ªØa r·∫ª h∆°n',
        inline: false
      });

    return interaction.reply({ embeds: [embed], ephemeral: true });
  }

  // Th·ª±c hi·ªán s·ª≠a ch·ªØa
  const oldDurability = user.rodDurability;
  user.rodDurability = Math.min(currentDurability + repairAmount, maxDurability);
  user.balance -= cost;
  await user.save();

  const actualRepair = user.rodDurability - oldDurability;

  // Log money spent on repair
  await logMoneySpent(interaction.user, cost, 'rod-repair', {
    repairType: repairType,
    durabilityBefore: oldDurability,
    durabilityAfter: user.rodDurability,
    rodLevel: rodLevel
  });

  const embed = new EmbedBuilder()
    .setColor('#00FF00')
    .setTitle('‚úÖ S·ª≠a ch·ªØa th√†nh c√¥ng')
    .setDescription(`ƒê√£ s·ª≠a ch·ªØa c·∫ßn c√¢u c·∫•p ${rodLevel} th√†nh c√¥ng!`)
    .addFields(
      {
        name: 'üîß Chi ti·∫øt s·ª≠a ch·ªØa',
        value: `**Lo·∫°i:** S·ª≠a ch·ªØa ${repairType === 'full' ? 'ho√†n to√†n' : repairType === 'partial' ? 'm·ªôt ph·∫ßn' : 't·ªëi thi·ªÉu'}\n**Chi ph√≠:** ${cost.toLocaleString()} xu\n**ƒê·ªô b·ªÅn ph·ª•c h·ªìi:** +${actualRepair}`,
        inline: true
      },
      {
        name: 'üìä Tr∆∞·ªõc/Sau',
        value: `**Tr∆∞·ªõc:** ${oldDurability}/${maxDurability}\n**Sau:** ${user.rodDurability}/${maxDurability}\n**S·ªë d∆∞ c√≤n l·∫°i:** ${user.balance.toLocaleString()} xu`,
        inline: true
      },
      {
        name: 'üìà Tr·∫°ng th√°i m·ªõi',
        value: `${getDurabilityEmoji(user.rodDurability, maxDurability)} **${getDurabilityStatus(user.rodDurability, maxDurability)}** (${Math.round((user.rodDurability/maxDurability)*100)}%)`,
        inline: false
      }
    )
    .setTimestamp()
    .setFooter({ 
      text: `${interaction.user.username}`, 
      iconURL: interaction.user.displayAvatarURL() 
    });

  if (interaction.deferred || interaction.replied) {
    await interaction.editReply({ embeds: [embed], components: [] });
  } else {
    await interaction.reply({ embeds: [embed] });
  }
}
