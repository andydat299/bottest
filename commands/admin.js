import { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } from 'discord.js';
import { 
  enableWeatherSystem, 
  disableWeatherSystem, 
  enableTimeSystem, 
  disableTimeSystem, 
  getSystemStatus,
  forceUpdateWeather 
} from '../utils/weatherSystem.js';
import { 
  enableEventSystem, 
  disableEventSystem, 
  getEventSystemStatus,
  activateSpecialEvent 
} from '../utils/seasonalEvents.js';
import {
  disableCommand,
  enableCommand,
  getCommandStatus,
  getControllableCommands,
  resetAllCommands
} from '../utils/commandControl.js';
import {
  enablePenaltySystem,
  disablePenaltySystem,
  setDailyLossLimit,
  setPenaltyMultiplier,
  getPenaltySystemStatus
} from '../utils/fishingPenalty.js';

export default {
  data: new SlashCommandBuilder()
    .setName('admin')
    .setDescription('Qu·∫£n l√Ω h·ªá th·ªëng bot (ch·ªâ admin)')
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
    .addSubcommandGroup(group =>
      group.setName('weather')
        .setDescription('Qu·∫£n l√Ω h·ªá th·ªëng th·ªùi ti·∫øt')
        .addSubcommand(subcommand =>
          subcommand.setName('enable')
            .setDescription('B·∫≠t h·ªá th·ªëng th·ªùi ti·∫øt')
        )
        .addSubcommand(subcommand =>
          subcommand.setName('disable')
            .setDescription('T·∫Øt h·ªá th·ªëng th·ªùi ti·∫øt')
        )
        .addSubcommand(subcommand =>
          subcommand.setName('time-enable')
            .setDescription('B·∫≠t h·ªá th·ªëng th·ªùi gian')
        )
        .addSubcommand(subcommand =>
          subcommand.setName('time-disable')
            .setDescription('T·∫Øt h·ªá th·ªëng th·ªùi gian')
        )
        .addSubcommand(subcommand =>
          subcommand.setName('update')
            .setDescription('C·∫≠p nh·∫≠t th·ªùi ti·∫øt ngay l·∫≠p t·ª©c')
        )
        .addSubcommand(subcommand =>
          subcommand.setName('status')
            .setDescription('Xem tr·∫°ng th√°i h·ªá th·ªëng th·ªùi ti·∫øt')
        )
    )
    .addSubcommandGroup(group =>
      group.setName('event')
        .setDescription('Qu·∫£n l√Ω h·ªá th·ªëng s·ª± ki·ªán')
        .addSubcommand(subcommand =>
          subcommand.setName('enable')
            .setDescription('B·∫≠t h·ªá th·ªëng s·ª± ki·ªán')
        )
        .addSubcommand(subcommand =>
          subcommand.setName('disable')
            .setDescription('T·∫Øt h·ªá th·ªëng s·ª± ki·ªán')
        )
        .addSubcommand(subcommand =>
          subcommand.setName('activate')
            .setDescription('K√≠ch ho·∫°t s·ª± ki·ªán ƒë·∫∑c bi·ªát')
            .addStringOption(option =>
              option.setName('event')
                .setDescription('T√™n s·ª± ki·ªán')
                .setRequired(true)
                .addChoices(
                  { name: 'üßß T·∫øt Nguy√™n ƒê√°n', value: 'LUNAR_NEW_YEAR' },
                  { name: 'üéÉ Halloween Ma Qu√°i', value: 'HALLOWEEN_SPOOKY' }
                )
            )
            .addIntegerOption(option =>
              option.setName('duration')
                .setDescription('Th·ªùi gian ho·∫°t ƒë·ªông (gi·ªù)')
                .setMinValue(1)
                .setMaxValue(168) // 1 tu·∫ßn
            )
        )
        .addSubcommand(subcommand =>
          subcommand.setName('status')
            .setDescription('Xem tr·∫°ng th√°i h·ªá th·ªëng s·ª± ki·ªán')
        )
    )
    .addSubcommandGroup(group =>
      group.setName('command')
        .setDescription('Qu·∫£n l√Ω b·∫≠t/t·∫Øt l·ªánh')
        .addSubcommand(subcommand =>
          subcommand.setName('disable')
            .setDescription('T·∫Øt m·ªôt l·ªánh c·ª• th·ªÉ')
            .addStringOption(option =>
              option.setName('command')
                .setDescription('T√™n l·ªánh c·∫ßn t·∫Øt')
                .setRequired(true)
                .addChoices(
                  { name: 'sell - B√°n c√°', value: 'sell' },
                  { name: 'fish - C√¢u c√°', value: 'fish' },
                  { name: 'upgrade - N√¢ng c·∫•p', value: 'upgrade' },
                  { name: 'repair - S·ª≠a ch·ªØa', value: 'repair' },
                  { name: 'inventory - T√∫i ƒë·ªì', value: 'inventory' },
                  { name: 'stats - Th·ªëng k√™', value: 'stats' },
                  { name: 'profile - H·ªì s∆°', value: 'profile' },
                  { name: 'quests - Nhi·ªám v·ª•', value: 'quests' }
                )
            )
        )
        .addSubcommand(subcommand =>
          subcommand.setName('enable')
            .setDescription('B·∫≠t l·∫°i m·ªôt l·ªánh')
            .addStringOption(option =>
              option.setName('command')
                .setDescription('T√™n l·ªánh c·∫ßn b·∫≠t')
                .setRequired(true)
                .addChoices(
                  { name: 'sell - B√°n c√°', value: 'sell' },
                  { name: 'fish - C√¢u c√°', value: 'fish' },
                  { name: 'upgrade - N√¢ng c·∫•p', value: 'upgrade' },
                  { name: 'repair - S·ª≠a ch·ªØa', value: 'repair' },
                  { name: 'inventory - T√∫i ƒë·ªì', value: 'inventory' },
                  { name: 'stats - Th·ªëng k√™', value: 'stats' },
                  { name: 'profile - H·ªì s∆°', value: 'profile' },
                  { name: 'quests - Nhi·ªám v·ª•', value: 'quests' }
                )
            )
        )
        .addSubcommand(subcommand =>
          subcommand.setName('status')
            .setDescription('Xem tr·∫°ng th√°i t·∫•t c·∫£ l·ªánh')
        )
        .addSubcommand(subcommand =>
          subcommand.setName('reset')
            .setDescription('B·∫≠t l·∫°i t·∫•t c·∫£ l·ªánh')
        )
    )
    .addSubcommandGroup(group =>
      group.setName('fishing')
        .setDescription('Qu·∫£n l√Ω h·ªá th·ªëng ph·∫°t xu khi h·ª•t c√°')
        .addSubcommand(subcommand =>
          subcommand.setName('penalty-enable')
            .setDescription('B·∫≠t h·ªá th·ªëng ph·∫°t xu khi h·ª•t c√°')
        )
        .addSubcommand(subcommand =>
          subcommand.setName('penalty-disable')
            .setDescription('T·∫Øt h·ªá th·ªëng ph·∫°t xu khi h·ª•t c√°')
        )
        .addSubcommand(subcommand =>
          subcommand.setName('set-limit')
            .setDescription('ƒê·∫∑t gi·ªõi h·∫°n xu m·∫•t t·ªëi ƒëa/ng√†y')
            .addIntegerOption(option =>
              option.setName('limit')
                .setDescription('Gi·ªõi h·∫°n xu (100-50000)')
                .setRequired(true)
                .setMinValue(100)
                .setMaxValue(50000)
            )
        )
        .addSubcommand(subcommand =>
          subcommand.setName('set-multiplier')
            .setDescription('ƒê·∫∑t h·ªá s·ªë ph·∫°t xu')
            .addNumberOption(option =>
              option.setName('multiplier')
                .setDescription('H·ªá s·ªë ph·∫°t (0.1-5.0)')
                .setRequired(true)
                .setMinValue(0.1)
                .setMaxValue(5.0)
            )
        )
        .addSubcommand(subcommand =>
          subcommand.setName('status')
            .setDescription('Xem tr·∫°ng th√°i h·ªá th·ªëng ph·∫°t xu')
        )
    )
    .addSubcommand(subcommand =>
      subcommand.setName('status')
        .setDescription('Xem tr·∫°ng th√°i t·ªïng quan t·∫•t c·∫£ h·ªá th·ªëng')
    ),

  async execute(interaction) {
    // Ki·ªÉm tra quy·ªÅn admin
    if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
      return await interaction.reply({
        content: '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!',
        ephemeral: true
      });
    }

    const group = interaction.options.getSubcommandGroup();
    const subcommand = interaction.options.getSubcommand();

    try {
      if (group === 'weather') {
        await handleWeatherCommands(interaction, subcommand);
      } else if (group === 'event') {
        await handleEventCommands(interaction, subcommand);
      } else if (group === 'command') {
        await handleCommandControls(interaction, subcommand);
      } else if (group === 'fishing') {
        if (subcommand === 'penalty-enable') {
          const enabled = enableFishingPenalty();
          if (enabled) {
            const statusEmbed = new EmbedBuilder()
              .setTitle('üü¢ H·ªá Th·ªëng Ph·∫°t Xu ƒê√£ B·∫≠t')
              .setDescription('Player s·∫Ω b·ªã ph·∫°t xu khi c√¢u c√° h·ª•t.')
              .setColor('#00ff00')
              .setTimestamp();
            
            await interaction.reply({ embeds: [statusEmbed] });
          } else {
            await interaction.reply('H·ªá th·ªëng ph·∫°t xu ƒë√£ ƒë∆∞·ª£c b·∫≠t t·ª´ tr∆∞·ªõc.');
          }
        } else if (subcommand === 'penalty-disable') {
          const disabled = disableFishingPenalty();
          if (disabled) {
            const statusEmbed = new EmbedBuilder()
              .setTitle('üî¥ H·ªá Th·ªëng Ph·∫°t Xu ƒê√£ T·∫Øt')
              .setDescription('Player s·∫Ω kh√¥ng b·ªã ph·∫°t xu khi c√¢u c√° h·ª•t.')
              .setColor('#ff0000')
              .setTimestamp();
            
            await interaction.reply({ embeds: [statusEmbed] });
          } else {
            await interaction.reply('H·ªá th·ªëng ph·∫°t xu ƒë√£ ƒë∆∞·ª£c t·∫Øt t·ª´ tr∆∞·ªõc.');
          }
        } else if (subcommand === 'set-limit') {
          const limit = interaction.options.getInteger('limit');
          const set = setDailyLossLimit(limit);
          if (set) {
            const statusEmbed = new EmbedBuilder()
              .setTitle('üí∞ ƒê√£ C·∫≠p Nh·∫≠t Gi·ªõi H·∫°n Ph·∫°t Xu')
              .setDescription(`Gi·ªõi h·∫°n m·ªõi: **${limit.toLocaleString()} xu/ng√†y**`)
              .setColor('#00ff00')
              .setTimestamp();
            
            await interaction.reply({ embeds: [statusEmbed] });
          } else {
            await interaction.reply('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t gi·ªõi h·∫°n ph·∫°t xu.');
          }
        } else if (subcommand === 'set-multiplier') {
          const multiplier = interaction.options.getNumber('multiplier');
          const set = setPenaltyMultiplier(multiplier);
          if (set) {
            const statusEmbed = new EmbedBuilder()
              .setTitle('üîß ƒê√£ C·∫≠p Nh·∫≠t H·ªá S·ªë Ph·∫°t')
              .setDescription(`H·ªá s·ªë m·ªõi: **x${multiplier}**`)
              .setColor('#00ff00')
              .setTimestamp();
            
            await interaction.reply({ embeds: [statusEmbed] });
          } else {
            await interaction.reply('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t h·ªá s·ªë ph·∫°t xu.');
          }
        } else if (subcommand === 'status') {
          const status = getFishingPenaltyStatus();
          const statusEmbed = new EmbedBuilder()
            .setTitle('üìä Tr·∫°ng Th√°i H·ªá Th·ªëng Ph·∫°t Xu')
            .addFields(
              { name: '‚ö° Tr·∫°ng th√°i', value: status.enabled ? 'üü¢ B·∫≠t' : 'üî¥ T·∫Øt', inline: true },
              { name: 'üí∞ Gi·ªõi h·∫°n/ng√†y', value: `${status.dailyLimit.toLocaleString()} xu`, inline: true },
              { name: 'üîß H·ªá s·ªë ph·∫°t', value: `x${status.multiplier}`, inline: true },
              { name: 'üìà Ph·∫°t c∆° b·∫£n', value: '8-50 xu/l·∫ßn h·ª•t', inline: true },
              { name: 'üåç Bonus ƒë·ªãa ƒëi·ªÉm', value: '0-22 xu th√™m', inline: true },
              { name: 'üé£ Bonus c·∫ßn c√¢u', value: '0-10 xu th√™m', inline: true }
            )
            .setColor(status.enabled ? '#00ff00' : '#ff0000')
            .setTimestamp();
          
          await interaction.reply({ embeds: [statusEmbed] });
        }
      } else if (subcommand === 'status') {
        await handleOverallStatus(interaction);
      }
    } catch (error) {
      console.error('Admin command error:', error);
      await interaction.reply({
        content: '‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh!',
        ephemeral: true
      });
    }
  }
};

async function handleWeatherCommands(interaction, subcommand) {
  let result;
  
  switch (subcommand) {
    case 'enable':
      result = enableWeatherSystem();
      break;
    case 'disable':
      result = disableWeatherSystem();
      break;
    case 'time-enable':
      result = enableTimeSystem();
      break;
    case 'time-disable':
      result = disableTimeSystem();
      break;
    case 'update':
      const newWeather = forceUpdateWeather();
      result = { 
        success: true, 
        message: `üå§Ô∏è ƒê√£ c·∫≠p nh·∫≠t th·ªùi ti·∫øt m·ªõi: ${newWeather.emoji} ${newWeather.name}` 
      };
      break;
    case 'status':
      const status = getSystemStatus();
      const embed = new EmbedBuilder()
        .setTitle('üå§Ô∏è Tr·∫°ng th√°i h·ªá th·ªëng th·ªùi ti·∫øt')
        .setDescription(status.status)
        .setColor(status.weatherEnabled && status.timeEnabled ? 0x00ff00 : 0xff9900)
        .setTimestamp();
      
      return await interaction.reply({ embeds: [embed] });
  }
  
  await interaction.reply({
    content: result.message,
    ephemeral: true
  });
}

async function handleEventCommands(interaction, subcommand) {
  let result;
  
  switch (subcommand) {
    case 'enable':
      result = enableEventSystem();
      break;
    case 'disable':
      result = disableEventSystem();
      break;
    case 'activate':
      const eventId = interaction.options.getString('event');
      const duration = interaction.options.getInteger('duration');
      result = activateSpecialEvent(eventId, duration);
      break;
    case 'status':
      const status = getEventSystemStatus();
      const embed = new EmbedBuilder()
        .setTitle('üéâ Tr·∫°ng th√°i h·ªá th·ªëng s·ª± ki·ªán')
        .setDescription(status.status)
        .addFields({
          name: 'S·ª± ki·ªán ƒëang ho·∫°t ƒë·ªông',
          value: status.activeEventsCount > 0 ? `${status.activeEventsCount} s·ª± ki·ªán` : 'Kh√¥ng c√≥',
          inline: true
        })
        .setColor(status.eventEnabled ? 0x00ff00 : 0xff0000)
        .setTimestamp();
      
      return await interaction.reply({ embeds: [embed] });
  }
  
  await interaction.reply({
    content: result.message,
    ephemeral: true
  });
}

async function handleOverallStatus(interaction) {
  const weatherStatus = getSystemStatus();
  const eventStatus = getEventSystemStatus();
  const commandStatus = getCommandStatus();
  
  const embed = new EmbedBuilder()
    .setTitle('‚öôÔ∏è Tr·∫°ng th√°i t·ªïng quan h·ªá th·ªëng')
    .addFields(
      {
        name: 'üå§Ô∏è H·ªá th·ªëng th·ªùi ti·∫øt',
        value: weatherStatus.status,
        inline: false
      },
      {
        name: 'üéâ H·ªá th·ªëng s·ª± ki·ªán',
        value: eventStatus.status,
        inline: false
      },
      {
        name: 'üéÆ H·ªá th·ªëng Commands',
        value: `Enabled: ${commandStatus.enabledCount}/${commandStatus.totalCommands}\nDisabled: ${commandStatus.disabledCount} l·ªánh`,
        inline: false
      },
      {
        name: 'üìä Th·ªëng k√™',
        value: `S·ª± ki·ªán ho·∫°t ƒë·ªông: ${eventStatus.activeEventsCount}`,
        inline: false
      }
    )
    .setColor(0x3498db)
    .setTimestamp()
    .setFooter({ text: 'S·ª≠ d·ª•ng /admin ƒë·ªÉ qu·∫£n l√Ω h·ªá th·ªëng' });
  
  if (commandStatus.disabledList.length > 0) {
    embed.addFields({
      name: 'üîí L·ªánh b·ªã t·∫Øt',
      value: commandStatus.disabledList.map(cmd => `/${cmd}`).join(', '),
      inline: false
    });
  }
  
  await interaction.reply({ embeds: [embed] });
}

// Command Control Handler
async function handleCommandControls(interaction, subcommand) {
  const commandName = interaction.options.getString('command');
  
  switch (subcommand) {
    case 'disable':
      const disableResult = disableCommand(commandName);
      await interaction.reply({
        content: disableResult.success ? `‚úÖ ${disableResult.message}` : `‚ùå ${disableResult.message}`,
        ephemeral: true
      });
      break;
      
    case 'enable':
      const enableResult = enableCommand(commandName);
      await interaction.reply({
        content: enableResult.success ? `‚úÖ ${enableResult.message}` : `‚ùå ${enableResult.message}`,
        ephemeral: true
      });
      break;
      
    case 'status':
      const status = getCommandStatus();
      
      const statusEmbed = new EmbedBuilder()
        .setTitle('üéÆ Tr·∫°ng th√°i Commands')
        .addFields(
          {
            name: 'üìä T·ªïng quan',
            value: `Total: ${status.totalCommands}\nEnabled: ${status.enabledCount}\nDisabled: ${status.disabledCount}`,
            inline: false
          }
        )
        .setColor(0x3498db)
        .setTimestamp();
        
      // Th√™m danh s√°ch l·ªánh
      const commandList = Object.entries(status.commands)
        .map(([cmd, stat]) => `/${cmd}: ${stat}`)
        .join('\n');
        
      statusEmbed.addFields({
        name: 'üìã Chi ti·∫øt Commands',
        value: commandList || 'Kh√¥ng c√≥ l·ªánh n√†o',
        inline: false
      });
      
      if (status.disabledList.length > 0) {
        statusEmbed.addFields({
          name: 'üîí L·ªánh b·ªã t·∫Øt',
          value: status.disabledList.map(cmd => `/${cmd}`).join(', '),
          inline: false
        });
      }
        
      await interaction.reply({ embeds: [statusEmbed] });
      break;
      
    case 'reset':
      const resetResult = resetAllCommands();
      
      const resetEmbed = new EmbedBuilder()
        .setTitle('üîÑ Reset Commands')
        .setDescription(resetResult.message)
        .setColor(0x2ecc71)
        .setTimestamp();
        
      if (resetResult.resetCommands.length > 0) {
        resetEmbed.addFields({
          name: '‚úÖ L·ªánh ƒë√£ ƒë∆∞·ª£c b·∫≠t l·∫°i',
          value: resetResult.resetCommands.map(cmd => `/${cmd}`).join(', '),
          inline: false
        });
      }
        
      await interaction.reply({ embeds: [resetEmbed], ephemeral: true });
      break;
  }
}
