import { SlashCommandBuilder, EmbedBuilder } from 'discord.js';
import { User } from '../schemas/userSchema.js';

export default {
  data: new SlashCommandBuilder()
    .setName('fishstats')
    .setDescription('Xem th·ªëng k√™ c√¢u c√° chi ti·∫øt c·ªßa b·∫°n üìä'),
  prefixEnabled: true, // Cho ph√©p s·ª≠ d·ª•ng v·ªõi prefix

  async execute(interaction) {
    const user = await User.findOne({ discordId: interaction.user.id });
    
    if (!user || !user.fishingStats || user.fishingStats.totalFishingAttempts === 0) {
      return interaction.reply({
        content: 'üé£ B·∫°n ch∆∞a c√≥ th·ªëng k√™ c√¢u c√° n√†o!\nüí° H√£y th·ª≠ l·ªánh `/fish` ƒë·ªÉ b·∫Øt ƒë·∫ßu c√¢u c√°.',
        ephemeral: true
      });
    }

    const stats = user.fishingStats;
    const totalAttempts = stats.totalFishingAttempts || 0;
    const successfulCatches = stats.successfulCatches || 0;
    const missedCatches = stats.missedCatches || 0;
    const successRate = totalAttempts > 0 ? ((successfulCatches / totalAttempts) * 100).toFixed(1) : '0.0';
    const missRate = totalAttempts > 0 ? ((missedCatches / totalAttempts) * 100).toFixed(1) : '0.0';

    // T√≠nh t·ª∑ l·ªá c√¢u h·ª•t hi·ªán t·∫°i
    const baseMissRate = 0.20;
    const rodLevel = user.rodLevel || 1;
    const missRateReduction = (rodLevel - 1) * 0.02;
    const currentMissRate = Math.max(baseMissRate - missRateReduction, 0.05);
    const currentMissRatePercent = (currentMissRate * 100).toFixed(1);

    const embed = new EmbedBuilder()
      .setColor('#1E90FF')
      .setTitle('üé£ Th·ªëng k√™ c√¢u c√° chi ti·∫øt')
      .setDescription(`B√°o c√°o c√¢u c√° c·ªßa **${interaction.user.username}**`)
      .addFields(
        {
          name: 'üìä T·ªïng quan',
          value: `‚Ä¢ T·ªïng l·∫ßn c√¢u: **${totalAttempts}**\n‚Ä¢ Th√†nh c√¥ng: **${successfulCatches}** (${successRate}%)\n‚Ä¢ C√¢u h·ª•t: **${missedCatches}** (${missRate}%)`,
          inline: false
        },
        {
          name: 'üéØ T·ª∑ l·ªá hi·ªán t·∫°i',
          value: `‚Ä¢ T·ª∑ l·ªá c√¢u h·ª•t: **${currentMissRatePercent}%**\n‚Ä¢ Rod Level: **${rodLevel}**\n‚Ä¢ Gi·∫£m: **${((rodLevel - 1) * 2).toFixed(0)}%** nh·ªù n√¢ng c·∫•p`,
          inline: true
        },
        {
          name: 'üí∞ Chi ph√≠',
          value: `‚Ä¢ L·∫ßn mi·ªÖn ph√≠: ${totalAttempts < 5 ? `**${5 - totalAttempts}** c√≤n l·∫°i` : '**ƒê√£ h·∫øt**'}\n‚Ä¢ Ph√≠ hi·ªán t·∫°i: **10 xu/l·∫ßn**\n‚Ä¢ T·ªïng chi ph√≠: **${Math.max(totalAttempts - 5, 0) * 10} xu**`,
          inline: true
        }
      )
      .setTimestamp()
      .setThumbnail(interaction.user.displayAvatarURL())
      .setFooter({ 
        text: 'Fishbot - Fishing Statistics',
        iconURL: interaction.client.user.displayAvatarURL() 
      });

    // Progress bar cho success rate
    const successProgressBar = createProgressBar(successfulCatches, totalAttempts, 15);
    embed.addFields({
      name: 'üìà Ti·∫øn ƒë·ªô th√†nh c√¥ng',
      value: `${successProgressBar}\n**${successfulCatches}/${totalAttempts}** l·∫ßn th√†nh c√¥ng`,
      inline: false
    });

    // Th√¥ng tin v·ªÅ n√¢ng c·∫•p
    if (rodLevel < 10) {
      const nextLevelMissRate = Math.max(baseMissRate - (rodLevel * 0.02), 0.05);
      const nextLevelMissRatePercent = (nextLevelMissRate * 100).toFixed(1);
      
      embed.addFields({
        name: '‚¨ÜÔ∏è N√¢ng c·∫•p ti·∫øp theo',
        value: `‚Ä¢ Rod Level ${rodLevel + 1}: Gi·∫£m t·ª∑ l·ªá c√¢u h·ª•t xu·ªëng **${nextLevelMissRatePercent}%**\n‚Ä¢ Ti·∫øt ki·ªám: **${(currentMissRate - nextLevelMissRate) * 100}%** √≠t c√¢u h·ª•t h∆°n`,
        inline: false
      });
    } else {
      embed.addFields({
        name: 'üèÜ Rod t·ªëi ƒëa',
        value: '‚Ä¢ B·∫°n ƒë√£ ƒë·∫°t **Rod Level 10**!\n‚Ä¢ T·ª∑ l·ªá c√¢u h·ª•t t·ªëi thi·ªÉu: **5%**\n‚Ä¢ Kh√¥ng th·ªÉ gi·∫£m th√™m n·ªØa',
        inline: false
      });
    }

    await interaction.reply({ embeds: [embed] });
  }
};

// T·∫°o progress bar
function createProgressBar(current, total, length = 15) {
  if (total === 0) return '‚ñí'.repeat(length);
  const percentage = current / total;
  const filled = Math.round(length * percentage);
  const empty = length - filled;
  
  return '‚ñà'.repeat(filled) + '‚ñí'.repeat(empty);
}
