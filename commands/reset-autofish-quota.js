import { SlashCommandBuilder, EmbedBuilder } from 'discord.js';
import { User } from '../schemas/userSchema.js';

function getTodayDateString() {
  const now = new Date();
  return `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;
}

export default {
  data: new SlashCommandBuilder()
    .setName('reset-autofish-quota')
    .setDescription('üîÑ Reset quota auto-fishing cho user (Admin only)')
    .addUserOption(option =>
      option.setName('user')
        .setDescription('User c·∫ßn reset quota')
        .setRequired(true)),
  async execute(interaction) {
    try {
      // Ki·ªÉm tra admin
      if (!interaction.member.permissions.has('Administrator')) {
        await interaction.reply({
          content: '‚ùå Ch·ªâ admin m·ªõi ƒë∆∞·ª£c s·ª≠ d·ª•ng l·ªánh n√†y!',
          flags: 64
        });
        return;
      }

      const targetUser = interaction.options.getUser('user');
      const todayKey = getTodayDateString();

      // L·∫•y user t·ª´ database
      const user = await User.findOne({ discordId: targetUser.id });
      if (!user) {
        await interaction.reply({
          content: '‚ùå Kh√¥ng t√¨m th·∫•y user trong database!',
          flags: 64
        });
        return;
      }

      // L∆∞u th√¥ng tin c≈© ƒë·ªÉ hi·ªÉn th·ªã
      const oldUsage = user.autoFishingToday?.minutes || user[`autofish_${todayKey}`] || 0;

      // Reset quota
      if (user.autoFishingToday) {
        user.autoFishingToday.minutes = 0;
        user.autoFishingToday.date = todayKey;
      } else {
        user.autoFishingToday = { date: todayKey, minutes: 0 };
      }

      // Reset fallback field n·∫øu c√≥
      if (user[`autofish_${todayKey}`] !== undefined) {
        user[`autofish_${todayKey}`] = 0;
      }

      await user.save();

      const embed = new EmbedBuilder()
        .setTitle('üîÑ Reset Auto-fishing Quota')
        .setDescription(`ƒê√£ reset quota auto-fishing cho **${targetUser.username}**`)
        .setColor('#00FF00')
        .addFields(
          { name: 'üë§ Target User', value: `${targetUser.username} (${targetUser.id})`, inline: false },
          { name: 'üìä Th·ªùi gian c≈©', value: `${oldUsage} ph√∫t`, inline: true },
          { name: 'üìä Th·ªùi gian m·ªõi', value: '0 ph√∫t', inline: true },
          { name: 'üìÖ Ng√†y', value: todayKey, inline: true },
          { name: 'üë®‚Äçüíº Admin', value: interaction.user.username, inline: true }
        )
        .setFooter({ text: 'User c√≥ th·ªÉ s·ª≠ d·ª•ng l·∫°i auto-fishing v·ªõi quota ƒë·∫ßy ƒë·ªß' })
        .setTimestamp();

      await interaction.reply({ embeds: [embed] });

      // Log action
      console.log(`Admin ${interaction.user.username} reset auto-fishing quota for ${targetUser.username} (${oldUsage} -> 0 minutes)`);

    } catch (error) {
      console.error('Reset autofish quota error:', error);
      await interaction.reply({
        content: `‚ùå C√≥ l·ªói x·∫£y ra: \`${error.message}\``,
        flags: 64
      });
    }
  }
};