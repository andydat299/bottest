/**
 * Script ƒë·ªÉ th√™m field autoFishingToday v√†o userSchema hi·ªán c√≥
 * Ch·∫°y script n√†y ƒë·ªÉ update schema m√† kh√¥ng l√†m m·∫•t d·ªØ li·ªáu c≈©
 */

import mongoose from 'mongoose';

async function addAutoFishingField() {
  try {
    console.log('üîß ƒêang th√™m field autoFishingToday v√†o userSchema...');
    
    // K·∫øt n·ªëi database
    if (mongoose.connection.readyState !== 1) {
      await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/bottest');
    }
    
    // L·∫•y collection users
    const db = mongoose.connection.db;
    const usersCollection = db.collection('users');
    
    // Th√™m field autoFishingToday cho t·∫•t c·∫£ users ch∆∞a c√≥
    const result = await usersCollection.updateMany(
      { autoFishingToday: { $exists: false } },
      { 
        $set: { 
          autoFishingToday: {
            date: null,
            minutes: 0
          }
        }
      }
    );
    
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${result.modifiedCount} users v·ªõi field autoFishingToday`);
    
    // Ki·ªÉm tra k·∫øt qu·∫£
    const sampleUser = await usersCollection.findOne({});
    console.log('üìä Sample user schema:', {
      _id: sampleUser?._id,
      autoFishingToday: sampleUser?.autoFishingToday,
      hasField: !!sampleUser?.autoFishingToday
    });
    
    console.log('üéâ Ho√†n th√†nh! B√¢y gi·ªù auto-fishing s·∫Ω track quota h·∫±ng ng√†y.');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi th√™m field:', error);
  } finally {
    await mongoose.disconnect();
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
  addAutoFishingField();
}

export { addAutoFishingField };