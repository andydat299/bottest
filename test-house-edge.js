// Test house edge logic - 70% bot th·∫Øng nh∆∞ng d·ª±a tr√™n ƒëi·ªÉm s·ªë
// Ch·∫°y: node test-house-edge.js

console.log('üé∞ TESTING HOUSE EDGE LOGIC (70% Bot Advantage)\n');

// M√¥ ph·ªèng logic house edge
function simulateHouseEdge(playerValue, dealerValue, dealerBust = false, iterations = 1000) {
  let dealerWins = 0;
  let playerWins = 0;
  let pushes = 0;
  
  const HOUSE_WIN_RATE = 0.7;
  
  for (let i = 0; i < iterations; i++) {
    const houseEdgeRoll = Math.random();
    let result;
    
    if (dealerBust) {
      if (houseEdgeRoll <= HOUSE_WIN_RATE) {
        // 70%: "S·ª≠a" dealer kh√¥ng bust
        const newDealerValue = Math.min(21, Math.max(17, playerValue + Math.floor(Math.random() * 3)));
        if (newDealerValue >= playerValue) {
          result = 'dealerWin';
        } else {
          result = 'playerWin';
        }
      } else {
        // 30%: Dealer th·ª±c s·ª± bust
        result = 'dealerBust';
      }
    } else {
      if (houseEdgeRoll <= HOUSE_WIN_RATE) {
        // 70%: ∆Øu ti√™n dealer
        if (dealerValue >= playerValue) {
          result = dealerValue > playerValue ? 'dealerWin' : 'push';
        } else {
          const pointDiff = playerValue - dealerValue;
          if (pointDiff <= 3) {
            result = 'dealerWin'; // House edge
          } else {
            result = 'playerWin';
          }
        }
      } else {
        // 30%: Lu·∫≠t c√¥ng b·∫±ng
        if (playerValue > dealerValue) {
          result = 'playerWin';
        } else if (playerValue < dealerValue) {
          result = 'dealerWin';
        } else {
          result = 'push';
        }
      }
    }
    
    if (result === 'dealerWin') dealerWins++;
    else if (result === 'playerWin' || result === 'dealerBust') playerWins++;
    else pushes++;
  }
  
  return {
    dealerWinRate: (dealerWins / iterations * 100).toFixed(1),
    playerWinRate: (playerWins / iterations * 100).toFixed(1),
    pushRate: (pushes / iterations * 100).toFixed(1),
    dealerWins,
    playerWins,
    pushes
  };
}

// Test cases
const testScenarios = [
  {
    name: 'Player 21, Dealer 17',
    playerValue: 21,
    dealerValue: 17,
    expected: 'Player should still lose ~70% due to house edge'
  },
  {
    name: 'Player 20, Dealer 18', 
    playerValue: 20,
    dealerValue: 18,
    expected: 'Close game - house edge should favor dealer'
  },
  {
    name: 'Player 21, Dealer 15',
    playerValue: 21,
    dealerValue: 15,
    expected: 'Large gap (>3) - player might win more often'
  },
  {
    name: 'Player 19, Dealer 19',
    playerValue: 19,
    dealerValue: 19,
    expected: 'Equal values - should push or dealer wins'
  },
  {
    name: 'Player 18, Dealer bust',
    playerValue: 18,
    dealerValue: 22,
    dealerBust: true,
    expected: 'Dealer bust but 70% chance to "recover"'
  }
];

console.log('üß™ RUNNING HOUSE EDGE SIMULATIONS:\n');

testScenarios.forEach((scenario, index) => {
  console.log(`üìã Test ${index + 1}: ${scenario.name}`);
  console.log(`üéØ Expected: ${scenario.expected}`);
  
  const result = simulateHouseEdge(
    scenario.playerValue, 
    scenario.dealerValue, 
    scenario.dealerBust,
    1000
  );
  
  console.log(`üìä Results (1000 simulations):`);
  console.log(`   ü§ñ Dealer wins: ${result.dealerWinRate}% (${result.dealerWins} times)`);
  console.log(`   üë§ Player wins: ${result.playerWinRate}% (${result.playerWins} times)`);
  console.log(`   ü§ù Pushes: ${result.pushRate}% (${result.pushes} times)`);
  
  const dealerAdvantage = parseFloat(result.dealerWinRate) > parseFloat(result.playerWinRate);
  console.log(`   ‚úÖ House Edge Working: ${dealerAdvantage ? 'YES' : 'NO'}`);
  console.log('‚îÄ'.repeat(60));
});

console.log('\nüéØ HOUSE EDGE FEATURES:');
console.log('‚úÖ 70% c∆° h·ªôi dealer th·∫Øng');
console.log('‚úÖ D·ª±a tr√™n ƒëi·ªÉm s·ªë th·ª±c t·∫ø, kh√¥ng random ho√†n to√†n');
console.log('‚úÖ Dealer bust c√≥ th·ªÉ ƒë∆∞·ª£c "c·ª©u" (70% th·ªùi gian)');
console.log('‚úÖ Ch√™nh l·ªách ƒëi·ªÉm nh·ªè (‚â§3): Dealer th·∫Øng');
console.log('‚úÖ Ch√™nh l·ªách ƒëi·ªÉm l·ªõn (>3): Player c√≥ c∆° h·ªôi th·∫Øng');
console.log('‚úÖ 30% th·ªùi gian √°p d·ª•ng lu·∫≠t c√¥ng b·∫±ng');

console.log('\nüí° V√ç D·ª§ TH·ª∞C T·∫æ:');
console.log('‚Ä¢ Player 21, Dealer 17 ‚Üí 70% dealer v·∫´n th·∫Øng');
console.log('‚Ä¢ Player 20, Dealer 18 ‚Üí Dealer th·∫Øng (ch√™nh ‚â§3)');  
console.log('‚Ä¢ Player 21, Dealer 15 ‚Üí Player c√≥ c∆° h·ªôi th·∫Øng (ch√™nh >3)');
console.log('‚Ä¢ Dealer bust ‚Üí 70% ƒë∆∞·ª£c "s·ª≠a" th√†nh kh√¥ng bust');

console.log('\nüé∞ K·∫øt lu·∫≠n: Bot c√≥ l·ª£i th·∫ø 70% nh∆∞ng v·∫´n d·ª±a tr√™n logic blackjack!');
