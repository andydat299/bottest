/**
 * Blackjack (X√¨ D√°ch) Game System
 */
import { User } from '../schemas/userSchema.js';

// C·∫•u h√¨nh game
const GAME_CONFIG = {
  minBet: 100,
  maxBet: 50000,
  dealerStandOn: 17,
  blackjackPayout: 1.5, // 3:2 payout
  normalPayout: 0.95     // 1:1 payout
};

// Card values v√† suits
const SUITS = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô£Ô∏è', '‚ô¶Ô∏è'];
const RANKS = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];

// Class ƒë·ªÉ qu·∫£n l√Ω b√†i
class Card {
  constructor(suit, rank) {
    this.suit = suit;
    this.rank = rank;
  }

  getValue() {
    if (this.rank === 'A') return 11; // Ace c√≥ th·ªÉ l√† 1 ho·∫∑c 11
    if (['J', 'Q', 'K'].includes(this.rank)) return 10;
    return parseInt(this.rank);
  }

  toString() {
    return `${this.rank}${this.suit}`;
  }
}

// Class ƒë·ªÉ qu·∫£n l√Ω b·ªô b√†i
class Deck {
  constructor() {
    this.cards = [];
    this.reset();
    this.shuffle();
  }

  reset() {
    this.cards = [];
    for (const suit of SUITS) {
      for (const rank of RANKS) {
        this.cards.push(new Card(suit, rank));
      }
    }
  }

  shuffle() {
    for (let i = this.cards.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [this.cards[i], this.cards[j]] = [this.cards[j], this.cards[i]];
    }
  }

  draw() {
    if (this.cards.length === 0) {
      this.reset();
      this.shuffle();
    }
    return this.cards.pop();
  }
}

// Class ƒë·ªÉ qu·∫£n l√Ω tay b√†i
class Hand {
  constructor() {
    this.cards = [];
  }

  addCard(card) {
    this.cards.push(card);
  }

  getValue() {
    let value = 0;
    let aces = 0;

    for (const card of this.cards) {
      if (card.rank === 'A') {
        aces++;
        value += 11;
      } else {
        value += card.getValue();
      }
    }

    // ƒêi·ªÅu ch·ªânh Ace t·ª´ 11 th√†nh 1 n·∫øu c·∫ßn
    while (value > 21 && aces > 0) {
      value -= 10;
      aces--;
    }

    return value;
  }

  isBlackjack() {
    return this.cards.length === 2 && this.getValue() === 21;
  }

  isBust() {
    return this.getValue() > 21;
  }

  toString() {
    return this.cards.map(card => card.toString()).join(' ');
  }

  getHiddenString() {
    // Hi·ªÉn th·ªã ch·ªâ l√° ƒë·∫ßu ti√™n, l√° th·ª© 2 ·∫©n
    if (this.cards.length === 0) return '';
    return `${this.cards[0].toString()} üé¥`;
  }
}

// Class qu·∫£n l√Ω game ch√≠nh
class BlackjackGame {
  constructor(userId, betAmount) {
    this.userId = userId;
    this.betAmount = betAmount;
    this.deck = new Deck();
    this.playerHand = new Hand();
    this.dealerHand = new Hand();
    this.gameState = 'playing'; // playing, playerWin, dealerWin, push, playerBust, dealerBust
    this.isFinished = false;
  }

  // B·∫Øt ƒë·∫ßu game
  start() {
    // Chia 2 l√° cho player, 2 l√° cho dealer
    this.playerHand.addCard(this.deck.draw());
    this.dealerHand.addCard(this.deck.draw());
    this.playerHand.addCard(this.deck.draw());
    this.dealerHand.addCard(this.deck.draw());

    // Ki·ªÉm tra blackjack ngay l·∫≠p t·ª©c
    if (this.playerHand.isBlackjack()) {
      if (this.dealerHand.isBlackjack()) {
        this.gameState = 'push';
        this.isFinished = true;
      } else {
        this.gameState = 'playerWin';
        this.isFinished = true;
      }
    }

    return this.getGameStatus();
  }

  // Player r√∫t th√™m b√†i
  hit() {
    if (this.isFinished) return this.getGameStatus();

    this.playerHand.addCard(this.deck.draw());

    if (this.playerHand.isBust()) {
      this.gameState = 'playerBust';
      this.isFinished = true;
    }

    return this.getGameStatus();
  }

  // Player d·ª´ng
  stand() {
    if (this.isFinished) return this.getGameStatus();

    // Dealer r√∫t b√†i theo lu·∫≠t (ph·∫£i r√∫t n·∫øu < 17)
    while (this.dealerHand.getValue() < GAME_CONFIG.dealerStandOn) {
      this.dealerHand.addCard(this.deck.draw());
    }

    // X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng
    const playerValue = this.playerHand.getValue();
    const dealerValue = this.dealerHand.getValue();

    if (this.dealerHand.isBust()) {
      this.gameState = 'dealerBust';
    } else if (playerValue > dealerValue) {
      this.gameState = 'playerWin';
    } else if (dealerValue > playerValue) {
      this.gameState = 'dealerWin';
    } else {
      this.gameState = 'push';
    }

    this.isFinished = true;
    return this.getGameStatus();
  }

  // L·∫•y tr·∫°ng th√°i game hi·ªán t·∫°i
  getGameStatus() {
    const playerValue = this.playerHand.getValue();
    const dealerValue = this.dealerHand.getValue();
    
    return {
      playerHand: this.playerHand.toString(),
      dealerHand: this.isFinished ? this.dealerHand.toString() : this.dealerHand.getHiddenString(),
      playerValue,
      dealerValue: this.isFinished ? dealerValue : this.dealerHand.cards[0].getValue(),
      gameState: this.gameState,
      isFinished: this.isFinished,
      betAmount: this.betAmount,
      canHit: !this.isFinished && playerValue < 21,
      canStand: !this.isFinished
    };
  }

  // T√≠nh to√°n k·∫øt qu·∫£ cu·ªëi game
  async getGameResult() {
    if (!this.isFinished) return null;

    let winAmount = 0;
    let resultMessage = '';

    switch (this.gameState) {
      case 'playerWin':
        if (this.playerHand.isBlackjack()) {
          winAmount = Math.floor(this.betAmount * GAME_CONFIG.blackjackPayout);
          resultMessage = 'üéâ BLACKJACK! B·∫°n th·∫Øng!';
        } else {
          winAmount = Math.floor(this.betAmount * GAME_CONFIG.normalPayout);
          resultMessage = 'üéâ B·∫°n th·∫Øng!';
        }
        break;
      case 'dealerBust':
        winAmount = Math.floor(this.betAmount * GAME_CONFIG.normalPayout);
        resultMessage = 'üéâ Dealer b·ªã bust! B·∫°n th·∫Øng!';
        break;
      case 'push':
        winAmount = 0;
        resultMessage = 'ü§ù H√≤a! Ho√†n ti·ªÅn c∆∞·ª£c';
        break;
      case 'playerBust':
      case 'dealerWin':
        winAmount = -this.betAmount;
        resultMessage = 'üò¢ B·∫°n thua!';
        break;
    }

    // C·∫≠p nh·∫≠t database
    try {
      await User.findOneAndUpdate(
        { userId: this.userId },
        { 
          $inc: { 
            money: winAmount,
            'stats.blackjackGames': 1,
            'stats.blackjackWinnings': winAmount
          }
        },
        { upsert: true }
      );
    } catch (error) {
      console.error('Error updating user after blackjack game:', error);
    }

    return {
      winAmount,
      resultMessage,
      gameState: this.gameState
    };
  }
}

// Storage cho active games
const activeGames = new Map();

/**
 * B·∫Øt ƒë·∫ßu game m·ªõi
 */
export async function startBlackjackGame(userId, betAmount) {
  // Validate bet amount
  if (betAmount < GAME_CONFIG.minBet || betAmount > GAME_CONFIG.maxBet) {
    return {
      success: false,
      message: `‚ùå S·ªë xu c∆∞·ª£c ph·∫£i t·ª´ ${GAME_CONFIG.minBet.toLocaleString()} ƒë·∫øn ${GAME_CONFIG.maxBet.toLocaleString()} xu!`
    };
  }

  // Ki·ªÉm tra user c√≥ ƒë·ªß xu kh√¥ng
  try {
    const user = await User.findOne({ userId });
    if (!user || user.money < betAmount) {
      return {
        success: false,
        message: `‚ùå B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ c∆∞·ª£c! C·∫ßn ${betAmount.toLocaleString()} xu.`
      };
    }

    // Tr·ª´ xu c∆∞·ª£c tr∆∞·ªõc
    await User.findOneAndUpdate(
      { userId },
      { $inc: { money: -betAmount } }
    );

    // T·∫°o game m·ªõi
    const game = new BlackjackGame(userId, betAmount);
    const gameStatus = game.start();
    
    // L∆∞u game v√†o active games
    activeGames.set(userId, game);

    return {
      success: true,
      game: gameStatus,
      message: 'üé¥ Game x√¨ d√°ch b·∫Øt ƒë·∫ßu!'
    };

  } catch (error) {
    console.error('Error starting blackjack game:', error);
    return {
      success: false,
      message: '‚ùå C√≥ l·ªói x·∫£y ra khi b·∫Øt ƒë·∫ßu game!'
    };
  }
}

/**
 * Player r√∫t th√™m b√†i (Hit)
 */
export function hitBlackjack(userId) {
  const game = activeGames.get(userId);
  if (!game) {
    return {
      success: false,
      message: '‚ùå B·∫°n kh√¥ng c√≥ game n√†o ƒëang ch∆°i!'
    };
  }

  const gameStatus = game.hit();
  return {
    success: true,
    game: gameStatus
  };
}

/**
 * Player d·ª´ng (Stand)
 */
export async function standBlackjack(userId) {
  const game = activeGames.get(userId);
  if (!game) {
    return {
      success: false,
      message: '‚ùå B·∫°n kh√¥ng c√≥ game n√†o ƒëang ch∆°i!'
    };
  }

  const gameStatus = game.stand();
  const result = await game.getGameResult();
  
  // X√≥a game kh·ªèi active games
  activeGames.delete(userId);

  return {
    success: true,
    game: gameStatus,
    result
  };
}

/**
 * L·∫•y game hi·ªán t·∫°i c·ªßa user
 */
export function getCurrentGame(userId) {
  const game = activeGames.get(userId);
  if (!game) return null;
  
  return game.getGameStatus();
}

/**
 * H·ªßy game hi·ªán t·∫°i (ho√†n ti·ªÅn)
 */
export async function cancelBlackjackGame(userId) {
  const game = activeGames.get(userId);
  if (!game) {
    return {
      success: false,
      message: '‚ùå B·∫°n kh√¥ng c√≥ game n√†o ƒëang ch∆°i!'
    };
  }

  // Ho√†n ti·ªÅn c∆∞·ª£c
  try {
    await User.findOneAndUpdate(
      { userId },
      { $inc: { money: game.betAmount } }
    );

    activeGames.delete(userId);

    return {
      success: true,
      message: `‚úÖ ƒê√£ h·ªßy game v√† ho√†n ${game.betAmount.toLocaleString()} xu!`
    };
  } catch (error) {
    console.error('Error canceling blackjack game:', error);
    return {
      success: false,
      message: '‚ùå C√≥ l·ªói x·∫£y ra khi h·ªßy game!'
    };
  }
}

/**
 * L·∫•y th·ªëng k√™ blackjack c·ªßa user
 */
export async function getBlackjackStats(userId) {
  try {
    const user = await User.findOne({ userId });
    if (!user) return null;

    return {
      gamesPlayed: user.stats?.blackjackGames || 0,
      totalWinnings: user.stats?.blackjackWinnings || 0,
      winRate: user.stats?.blackjackGames ? 
        Math.round(((user.stats.blackjackWinnings || 0) / (user.stats.blackjackGames * 1000)) * 100) : 0
    };
  } catch (error) {
    console.error('Error getting blackjack stats:', error);
    return null;
  }
}

/**
 * Admin function - L·∫•y th·ªëng k√™ t·ªïng quan
 */
export function getGameSystemStats() {
  return {
    activeGames: activeGames.size,
    config: GAME_CONFIG
  };
}
