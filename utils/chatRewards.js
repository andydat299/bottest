/**
 * Chat Rewards System - H·ªá th·ªëng th∆∞·ªüng xu khi chat
 */
import User from '../schemas/userSchema.js';

// C·∫•u h√¨nh chat rewards
const CHAT_REWARD_CONFIG = {
  channelId: '1363492195478540348', // Channel ID ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
  dropRate: 0.01, // 1% t·ªâ l·ªá r∆°i xu
  minCoins: 1,
  maxCoins: 1000,
  cooldown: 30000, // 30 gi√¢y cooldown m·ªói user
  enabled: true
};

// Map l∆∞u cooldown c·ªßa t·ª´ng user
const userCooldowns = new Map();

/**
 * T·∫°o s·ªë xu ng·∫´u nhi√™n trong kho·∫£ng min-max
 */
function generateRandomCoins() {
  return Math.floor(Math.random() * (CHAT_REWARD_CONFIG.maxCoins - CHAT_REWARD_CONFIG.minCoins + 1)) + CHAT_REWARD_CONFIG.minCoins;
}

/**
 * Ki·ªÉm tra cooldown c·ªßa user
 */
function isUserOnCooldown(userId) {
  const lastReward = userCooldowns.get(userId);
  if (!lastReward) return false;
  
  const timePassed = Date.now() - lastReward;
  return timePassed < CHAT_REWARD_CONFIG.cooldown;
}

/**
 * X·ª≠ l√Ω tin nh·∫Øn chat ƒë·ªÉ ki·ªÉm tra v√† trao th∆∞·ªüng
 */
export async function processChatMessage(message) {
  try {
    // B·ªè qua n·∫øu h·ªá th·ªëng b·ªã t·∫Øt
    if (!CHAT_REWARD_CONFIG.enabled) return null;
    
    // B·ªè qua n·∫øu kh√¥ng ph·∫£i channel ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    if (message.channel.id !== CHAT_REWARD_CONFIG.channelId) return null;
    
    // B·ªè qua bot messages
    if (message.author.bot) return null;
    
    // Ki·ªÉm tra cooldown
    if (isUserOnCooldown(message.author.id)) return null;
    
    // Ki·ªÉm tra t·ªâ l·ªá r∆°i (1%)
    const roll = Math.random();
    if (roll > CHAT_REWARD_CONFIG.dropRate) return null;
    
    // T·∫°o s·ªë xu th∆∞·ªüng
    const rewardCoins = generateRandomCoins();
    
    // C·∫≠p nh·∫≠t database
    const user = await User.findOneAndUpdate(
      { userId: message.author.id },
      { 
        $inc: { 
          money: rewardCoins,
          'stats.totalChatRewards': rewardCoins,
          'stats.chatRewardCount': 1
        }
      },
      { upsert: true, new: true }
    );
    
    // ƒê·∫∑t cooldown
    userCooldowns.set(message.author.id, Date.now());
    
    // Tr·∫£ v·ªÅ th√¥ng tin th∆∞·ªüng
    return {
      success: true,
      userId: message.author.id,
      username: message.author.username,
      coins: rewardCoins,
      newBalance: user.money,
      channel: message.channel.name
    };
    
  } catch (error) {
    console.error('Error processing chat reward:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * L·∫•y th·ªëng k√™ chat rewards c·ªßa user
 */
export async function getChatRewardStats(userId) {
  try {
    const user = await User.findOne({ userId });
    if (!user) return null;
    
    return {
      totalRewards: user.stats?.totalChatRewards || 0,
      rewardCount: user.stats?.chatRewardCount || 0,
      averageReward: user.stats?.chatRewardCount ? 
        Math.round((user.stats.totalChatRewards || 0) / user.stats.chatRewardCount) : 0
    };
  } catch (error) {
    console.error('Error getting chat reward stats:', error);
    return null;
  }
}

/**
 * Admin functions - Qu·∫£n l√Ω h·ªá th·ªëng chat rewards
 */

/**
 * B·∫≠t/t·∫Øt h·ªá th·ªëng chat rewards
 */
export function toggleChatRewards(enabled = null) {
  if (enabled !== null) {
    CHAT_REWARD_CONFIG.enabled = enabled;
  } else {
    CHAT_REWARD_CONFIG.enabled = !CHAT_REWARD_CONFIG.enabled;
  }
  
  return {
    success: true,
    enabled: CHAT_REWARD_CONFIG.enabled,
    message: CHAT_REWARD_CONFIG.enabled ? 
      'üü¢ Chat rewards ƒë√£ ƒë∆∞·ª£c B·∫¨T' : 
      'üî¥ Chat rewards ƒë√£ ƒë∆∞·ª£c T·∫ÆT'
  };
}

/**
 * Thay ƒë·ªïi t·ªâ l·ªá r∆°i xu
 */
export function setChatDropRate(rate) {
  if (rate < 0 || rate > 1) {
    return {
      success: false,
      message: '‚ùå T·ªâ l·ªá ph·∫£i t·ª´ 0.001 ƒë·∫øn 1.0 (0.1% - 100%)'
    };
  }
  
  const oldRate = CHAT_REWARD_CONFIG.dropRate;
  CHAT_REWARD_CONFIG.dropRate = rate;
  
  return {
    success: true,
    oldRate: (oldRate * 100).toFixed(1),
    newRate: (rate * 100).toFixed(1),
    message: `üìä ƒê√£ thay ƒë·ªïi t·ªâ l·ªá r∆°i xu t·ª´ ${(oldRate * 100).toFixed(1)}% th√†nh ${(rate * 100).toFixed(1)}%`
  };
}

/**
 * Thay ƒë·ªïi kho·∫£ng xu th∆∞·ªüng
 */
export function setChatRewardRange(min, max) {
  if (min < 1 || max < min || max > 100000) {
    return {
      success: false,
      message: '‚ùå Kho·∫£ng xu kh√¥ng h·ª£p l·ªá! (Min: 1, Max: 100000, Min < Max)'
    };
  }
  
  const oldMin = CHAT_REWARD_CONFIG.minCoins;
  const oldMax = CHAT_REWARD_CONFIG.maxCoins;
  
  CHAT_REWARD_CONFIG.minCoins = min;
  CHAT_REWARD_CONFIG.maxCoins = max;
  
  return {
    success: true,
    oldRange: `${oldMin}-${oldMax}`,
    newRange: `${min}-${max}`,
    message: `üí∞ ƒê√£ thay ƒë·ªïi kho·∫£ng xu t·ª´ ${oldMin}-${oldMax} th√†nh ${min}-${max}`
  };
}

/**
 * Thay ƒë·ªïi cooldown
 */
export function setChatCooldown(seconds) {
  if (seconds < 1 || seconds > 3600) {
    return {
      success: false,
      message: '‚ùå Cooldown ph·∫£i t·ª´ 1-3600 gi√¢y (1 gi√¢y - 1 gi·ªù)'
    };
  }
  
  const oldCooldown = CHAT_REWARD_CONFIG.cooldown;
  CHAT_REWARD_CONFIG.cooldown = seconds * 1000;
  
  return {
    success: true,
    oldCooldown: oldCooldown / 1000,
    newCooldown: seconds,
    message: `‚è±Ô∏è ƒê√£ thay ƒë·ªïi cooldown t·ª´ ${oldCooldown / 1000}s th√†nh ${seconds}s`
  };
}

/**
 * L·∫•y c·∫•u h√¨nh hi·ªán t·∫°i
 */
export function getChatRewardConfig() {
  return {
    enabled: CHAT_REWARD_CONFIG.enabled,
    channelId: CHAT_REWARD_CONFIG.channelId,
    dropRate: CHAT_REWARD_CONFIG.dropRate,
    dropRatePercent: (CHAT_REWARD_CONFIG.dropRate * 100).toFixed(1),
    minCoins: CHAT_REWARD_CONFIG.minCoins,
    maxCoins: CHAT_REWARD_CONFIG.maxCoins,
    cooldownSeconds: CHAT_REWARD_CONFIG.cooldown / 1000,
    activeCooldowns: userCooldowns.size
  };
}

/**
 * X√≥a cooldown c·ªßa m·ªôt user (admin)
 */
export function clearUserCooldown(userId) {
  const hadCooldown = userCooldowns.has(userId);
  userCooldowns.delete(userId);
  
  return {
    success: true,
    hadCooldown,
    message: hadCooldown ? 
      '‚úÖ ƒê√£ x√≥a cooldown c·ªßa user' : 
      '‚ÑπÔ∏è User kh√¥ng c√≥ cooldown'
  };
}

/**
 * X√≥a t·∫•t c·∫£ cooldowns (admin)
 */
export function clearAllCooldowns() {
  const count = userCooldowns.size;
  userCooldowns.clear();
  
  return {
    success: true,
    clearedCount: count,
    message: `üßπ ƒê√£ x√≥a ${count} cooldown`
  };
}
