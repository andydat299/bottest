/**
 * Weather System - H·ªá th·ªëng th·ªùi ti·∫øt ·∫£nh h∆∞·ªüng c√¢u c√°
 */

const WEATHER_TYPES = {
  SUNNY: {
    name: 'N·∫Øng',
    emoji: '‚òÄÔ∏è',
    description: 'Tr·ªùi n·∫Øng ƒë·∫πp, c√° ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
    fishRateMultiplier: 1.0,
    rareFishBonus: 0,
    weight: 30
  },
  CLOUDY: {
    name: 'Nhi·ªÅu m√¢y',
    emoji: '‚òÅÔ∏è', 
    description: 'Tr·ªùi nhi·ªÅu m√¢y, c√° d·ªÖ c√¢u h∆°n',
    fishRateMultiplier: 1.1,
    rareFishBonus: 0.05,
    weight: 25
  },
  RAINY: {
    name: 'M∆∞a',
    emoji: 'üåßÔ∏è',
    description: 'Tr·ªùi m∆∞a, c√° r·∫•t ho·∫°t ƒë·ªông',
    fishRateMultiplier: 1.3,
    rareFishBonus: 0.1,
    weight: 20
  },
  STORMY: {
    name: 'B√£o',
    emoji: '‚õàÔ∏è',
    description: 'Tr·ªùi b√£o, kh√≥ c√¢u nh∆∞ng c√° hi·∫øm xu·∫•t hi·ªán',
    fishRateMultiplier: 0.7,
    rareFishBonus: 0.2,
    weight: 8
  },
  FOGGY: {
    name: 'S∆∞∆°ng m√π',
    emoji: 'üå´Ô∏è',
    description: 'S∆∞∆°ng m√π d√†y ƒë·∫∑c, c√° huy·ªÅn b√≠ xu·∫•t hi·ªán',
    fishRateMultiplier: 0.9,
    rareFishBonus: 0.15,
    weight: 12
  },
  WINDY: {
    name: 'Gi√≥ m·∫°nh',
    emoji: 'üí®',
    description: 'Gi√≥ m·∫°nh, c√° nh·∫£y nhi·ªÅu h∆°n',
    fishRateMultiplier: 1.2,
    rareFishBonus: 0.08,
    weight: 15
  }
};

const TIME_PERIODS = {
  DAWN: {
    name: 'B√¨nh minh',
    emoji: 'üåÖ',
    hours: [5, 6, 7],
    description: 'Bu·ªïi b√¨nh minh, c√° r·∫•t ho·∫°t ƒë·ªông',
    fishRateMultiplier: 1.2,
    rareFishBonus: 0.1
  },
  MORNING: {
    name: 'Bu·ªïi s√°ng',
    emoji: 'üåû',
    hours: [8, 9, 10, 11],
    description: 'Bu·ªïi s√°ng, th·ªùi gian t·ªët ƒë·ªÉ c√¢u c√°',
    fishRateMultiplier: 1.1,
    rareFishBonus: 0.05
  },
  NOON: {
    name: 'Bu·ªïi tr∆∞a',
    emoji: 'üåá',
    hours: [12, 13, 14, 15],
    description: 'Bu·ªïi tr∆∞a, c√° √≠t ho·∫°t ƒë·ªông',
    fishRateMultiplier: 0.8,
    rareFishBonus: 0
  },
  AFTERNOON: {
    name: 'Bu·ªïi chi·ªÅu',
    emoji: 'üåÜ',
    hours: [16, 17, 18],
    description: 'Bu·ªïi chi·ªÅu, c√° b·∫Øt ƒë·∫ßu ho·∫°t ƒë·ªông tr·ªü l·∫°i',
    fishRateMultiplier: 1.0,
    rareFishBonus: 0.03
  },
  EVENING: {
    name: 'Bu·ªïi t·ªëi',
    emoji: 'üåÉ',
    hours: [19, 20, 21],
    description: 'Bu·ªïi t·ªëi, c√° ƒë√™m xu·∫•t hi·ªán',
    fishRateMultiplier: 1.15,
    rareFishBonus: 0.08
  },
  NIGHT: {
    name: 'ƒê√™m khuya',
    emoji: 'üåô',
    hours: [22, 23, 0, 1, 2, 3, 4],
    description: 'ƒê√™m khuya, c√° ƒë√™m hi·∫øm xu·∫•t hi·ªán',
    fishRateMultiplier: 0.9,
    rareFishBonus: 0.15
  }
};

// Cache th·ªùi ti·∫øt (reset m·ªói 30 ph√∫t)
let currentWeather = null;
let weatherLastUpdate = 0;
const WEATHER_UPDATE_INTERVAL = 30 * 60 * 1000; // 30 ph√∫t

/**
 * L·∫•y th·ªùi ti·∫øt hi·ªán t·∫°i
 */
export function getCurrentWeather() {
  const now = Date.now();
  
  // Ki·ªÉm tra n·∫øu c·∫ßn update th·ªùi ti·∫øt
  if (!currentWeather || (now - weatherLastUpdate) > WEATHER_UPDATE_INTERVAL) {
    currentWeather = generateRandomWeather();
    weatherLastUpdate = now;
  }
  
  return currentWeather;
}

/**
 * T·∫°o th·ªùi ti·∫øt ng·∫´u nhi√™n d·ª±a tr√™n weight
 */
function generateRandomWeather() {
  const totalWeight = Object.values(WEATHER_TYPES).reduce((sum, weather) => sum + weather.weight, 0);
  let random = Math.random() * totalWeight;
  
  for (const [key, weather] of Object.entries(WEATHER_TYPES)) {
    random -= weather.weight;
    if (random <= 0) {
      return {
        type: key,
        ...weather
      };
    }
  }
  
  // Fallback
  return {
    type: 'SUNNY',
    ...WEATHER_TYPES.SUNNY
  };
}

/**
 * L·∫•y th·ªùi gian hi·ªán t·∫°i (theo gi·ªù Vi·ªát Nam)
 */
export function getCurrentTimePeriod() {
  const now = new Date();
  const vietnamTime = new Date(now.getTime() + (7 * 60 * 60 * 1000)); // UTC+7
  const hour = vietnamTime.getUTCHours();
  
  for (const [key, period] of Object.entries(TIME_PERIODS)) {
    if (period.hours.includes(hour)) {
      return {
        type: key,
        hour,
        ...period
      };
    }
  }
  
  // Fallback
  return {
    type: 'MORNING',
    hour,
    ...TIME_PERIODS.MORNING
  };
}

/**
 * T√≠nh h·ªá s·ªë ·∫£nh h∆∞·ªüng t·ªïng h·ª£p t·ª´ th·ªùi ti·∫øt v√† th·ªùi gian
 */
export function getEnvironmentModifiers() {
  const weather = getCurrentWeather();
  const timePeriod = getCurrentTimePeriod();
  
  // T·ªïng h·ª£p h·ªá s·ªë
  const fishRateMultiplier = weather.fishRateMultiplier * timePeriod.fishRateMultiplier;
  const rareFishBonus = weather.rareFishBonus + timePeriod.rareFishBonus;
  
  return {
    weather,
    timePeriod,
    modifiers: {
      fishRateMultiplier: Math.round(fishRateMultiplier * 100) / 100, // L√†m tr√≤n 2 ch·ªØ s·ªë
      rareFishBonus: Math.round(rareFishBonus * 100) / 100,
      combinedMultiplier: fishRateMultiplier
    }
  };
}

/**
 * √Åp d·ª•ng h·ªá s·ªë m√¥i tr∆∞·ªùng v√†o t·ª∑ l·ªá c√¢u h·ª•t
 */
export function applyEnvironmentToMissRate(baseMissRate) {
  const { modifiers } = getEnvironmentModifiers();
  
  // H·ªá s·ªë t√≠ch c·ª±c gi·∫£m t·ª∑ l·ªá c√¢u h·ª•t
  const adjustedMissRate = baseMissRate / modifiers.fishRateMultiplier;
  
  return Math.min(0.8, Math.max(0.05, adjustedMissRate)); // Gi·ªõi h·∫°n 5%-80%
}

/**
 * Ki·ªÉm tra xem c√≥ ƒë∆∞·ª£c bonus c√° hi·∫øm kh√¥ng
 */
export function shouldGetRareFishBonus() {
  const { modifiers } = getEnvironmentModifiers();
  return Math.random() < modifiers.rareFishBonus;
}

/**
 * L·∫•y th√¥ng tin m√¥i tr∆∞·ªùng ƒë·ªÉ hi·ªÉn th·ªã
 */
export function getEnvironmentDisplay() {
  const { weather, timePeriod, modifiers } = getEnvironmentModifiers();
  
  const effectDescription = [];
  
  if (modifiers.fishRateMultiplier > 1.0) {
    effectDescription.push('üé£ D·ªÖ c√¢u h∆°n');
  } else if (modifiers.fishRateMultiplier < 1.0) {
    effectDescription.push('üé£ Kh√≥ c√¢u h∆°n');
  }
  
  if (modifiers.rareFishBonus > 0) {
    effectDescription.push('‚ú® TƒÉng c√° hi·∫øm');
  }
  
  return {
    weather: `${weather.emoji} ${weather.name}`,
    time: `${timePeriod.emoji} ${timePeriod.name}`,
    effects: effectDescription.join(', ') || 'B√¨nh th∆∞·ªùng',
    details: {
      weatherDesc: weather.description,
      timeDesc: timePeriod.description,
      multiplier: `${Math.round(modifiers.fishRateMultiplier * 100)}%`,
      rareBonus: `+${Math.round(modifiers.rareFishBonus * 100)}%`
    }
  };
}

/**
 * Force update th·ªùi ti·∫øt (cho admin)
 */
export function forceUpdateWeather() {
  currentWeather = generateRandomWeather();
  weatherLastUpdate = Date.now();
  return currentWeather;
}
