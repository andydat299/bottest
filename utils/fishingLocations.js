/**
 * Fishing Locations System - H·ªá th·ªëng ƒë·ªãa ƒëi·ªÉm c√¢u c√°
 */

export const FISHING_LOCATIONS = {
  LAKE: {
    id: 'lake',
    name: 'H·ªì n∆∞·ªõc ng·ªçt',
    emoji: 'üèûÔ∏è',
    description: 'H·ªì n∆∞·ªõc ng·ªçt y√™n tƒ©nh, d·ªÖ c√¢u c√° n∆∞·ªõc ng·ªçt',
    cost: 0, // Mi·ªÖn ph√≠
    unlockLevel: 1,
    modifiers: {
      fishRateMultiplier: 1.0,
      rareFishBonus: 0,
      experienceMultiplier: 1.0
    },
    availableFish: ['common', 'rare'],
    specialFish: [
      { name: 'C√° Ch√©p V√†ng', rarity: 'rare', bonus: 0.1 },
      { name: 'C√° Tr·∫Øm', rarity: 'common', bonus: 0.2 }
    ]
  },
  
  RIVER: {
    id: 'river',
    name: 'D√≤ng s√¥ng',
    emoji: 'üèîÔ∏è',
    description: 'D√≤ng s√¥ng ch·∫£y xi·∫øt, c√° ƒëa d·∫°ng h∆°n',
    cost: 50,
    unlockLevel: 3,
    modifiers: {
      fishRateMultiplier: 1.1,
      rareFishBonus: 0.05,
      experienceMultiplier: 1.1
    },
    availableFish: ['common', 'rare', 'legendary'],
    specialFish: [
      { name: 'C√° H·ªìi', rarity: 'rare', bonus: 0.15 },
      { name: 'C√° T·∫ßm', rarity: 'legendary', bonus: 0.08 }
    ]
  },
  
  OCEAN: {
    id: 'ocean',
    name: 'ƒê·∫°i d∆∞∆°ng',
    emoji: 'üåä',
    description: 'ƒê·∫°i d∆∞∆°ng bao la, c√° bi·ªÉn hi·∫øm v√† qu√Ω',
    cost: 100,
    unlockLevel: 5,
    modifiers: {
      fishRateMultiplier: 0.9,
      rareFishBonus: 0.15,
      experienceMultiplier: 1.3
    },
    availableFish: ['common', 'rare', 'legendary', 'mythical'],
    specialFish: [
      { name: 'C√° M·∫≠p Tr·∫Øng', rarity: 'legendary', bonus: 0.1 },
      { name: 'C√° Voi Xanh', rarity: 'mythical', bonus: 0.05 }
    ]
  },
  
  DEEP_SEA: {
    id: 'deep_sea',
    name: 'Bi·ªÉn s√¢u',
    emoji: 'üåå',
    description: 'V√πng bi·ªÉn s√¢u th·∫≥m, sinh v·∫≠t huy·ªÅn b√≠',
    cost: 200,
    unlockLevel: 7,
    modifiers: {
      fishRateMultiplier: 0.7,
      rareFishBonus: 0.25,
      experienceMultiplier: 1.5
    },
    availableFish: ['rare', 'legendary', 'mythical'],
    specialFish: [
      { name: 'C√° R·ªìng Bi·ªÉn S√¢u', rarity: 'mythical', bonus: 0.08 },
      { name: 'Qu√°i V·∫≠t Bi·ªÉn', rarity: 'mythical', bonus: 0.03 }
    ]
  },
  
  ICE_LAKE: {
    id: 'ice_lake',
    name: 'H·ªì bƒÉng',
    emoji: '‚ùÑÔ∏è',
    description: 'H·ªì bƒÉng l·∫°nh gi√°, c√° bƒÉng hi·∫øm c√≥',
    cost: 150,
    unlockLevel: 6,
    modifiers: {
      fishRateMultiplier: 0.8,
      rareFishBonus: 0.2,
      experienceMultiplier: 1.4
    },
    availableFish: ['rare', 'legendary', 'mythical'],
    specialFish: [
      { name: 'C√° BƒÉng Tinh', rarity: 'legendary', bonus: 0.12 },
      { name: 'C√° R·ªìng BƒÉng', rarity: 'mythical', bonus: 0.06 }
    ]
  },
  
  VOLCANIC_LAKE: {
    id: 'volcanic_lake',
    name: 'H·ªì n√∫i l·ª≠a',
    emoji: 'üåã',
    description: 'H·ªì n√∫i l·ª≠a n√≥ng b·ªèng, c√° l·ª≠a huy·ªÅn tho·∫°i',
    cost: 300,
    unlockLevel: 8,
    modifiers: {
      fishRateMultiplier: 0.6,
      rareFishBonus: 0.3,
      experienceMultiplier: 2.0
    },
    availableFish: ['legendary', 'mythical'],
    specialFish: [
      { name: 'C√° L·ª≠a ƒê·ªãa Ng·ª•c', rarity: 'mythical', bonus: 0.1 },
      { name: 'Ph∆∞·ª£ng Ho√†ng C√°', rarity: 'mythical', bonus: 0.04 }
    ]
  },
  
  MYSTICAL_POND: {
    id: 'mystical_pond',
    name: 'Ao huy·ªÅn b√≠',
    emoji: '‚ú®',
    description: 'Ao n∆∞·ªõc huy·ªÅn b√≠, ch·ªâ xu·∫•t hi·ªán v√†o ƒë√™m trƒÉng tr√≤n',
    cost: 500,
    unlockLevel: 10,
    modifiers: {
      fishRateMultiplier: 0.5,
      rareFishBonus: 0.4,
      experienceMultiplier: 3.0
    },
    availableFish: ['mythical'],
    specialFish: [
      { name: 'C√° Thi√™n Th·∫ßn', rarity: 'mythical', bonus: 0.15 },
      { name: 'R·ªìng Th·∫ßn N∆∞·ªõc', rarity: 'mythical', bonus: 0.08 }
    ],
    specialRequirement: 'Ch·ªâ m·ªü v√†o ƒë√™m (22h-6h)'
  }
};

/**
 * L·∫•y danh s√°ch ƒë·ªãa ƒëi·ªÉm m√† user c√≥ th·ªÉ truy c·∫≠p
 */
export function getAvailableLocations(userLevel, currentHour = null) {
  const available = [];
  
  for (const [key, location] of Object.entries(FISHING_LOCATIONS)) {
    if (userLevel >= location.unlockLevel) {
      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë·∫∑c bi·ªát
      if (location.specialRequirement && location.id === 'mystical_pond') {
        const hour = currentHour || new Date().getHours();
        if (hour < 22 && hour >= 6) {
          continue; // Ao huy·ªÅn b√≠ ch·ªâ m·ªü v√†o ƒë√™m
        }
      }
      
      available.push({
        key,
        ...location
      });
    }
  }
  
  return available;
}

/**
 * L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ƒë·ªãa ƒëi·ªÉm
 */
export function getLocationInfo(locationId) {
  return FISHING_LOCATIONS[locationId] || FISHING_LOCATIONS.LAKE;
}

/**
 * Ki·ªÉm tra xem user c√≥ th·ªÉ c√¢u ·ªü ƒë·ªãa ƒëi·ªÉm n√†y kh√¥ng
 */
export function canFishAtLocation(locationId, userLevel, userBalance) {
  const location = FISHING_LOCATIONS[locationId];
  if (!location) return { canFish: false, reason: 'ƒê·ªãa ƒëi·ªÉm kh√¥ng t·ªìn t·∫°i' };
  
  if (userLevel < location.unlockLevel) {
    return { 
      canFish: false, 
      reason: `C·∫ßn rod level ${location.unlockLevel} ƒë·ªÉ m·ªü kh√≥a` 
    };
  }
  
  if (userBalance < location.cost) {
    return { 
      canFish: false, 
      reason: `C·∫ßn ${location.cost} xu ƒë·ªÉ c√¢u ·ªü ƒë√¢y` 
    };
  }
  
  // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë·∫∑c bi·ªát
  if (location.specialRequirement && location.id === 'mystical_pond') {
    const hour = new Date().getHours();
    if (hour >= 6 && hour < 22) {
      return { 
        canFish: false, 
        reason: 'Ao huy·ªÅn b√≠ ch·ªâ m·ªü v√†o ƒë√™m (22h-6h)' 
      };
    }
  }
  
  return { canFish: true };
}

/**
 * √Åp d·ª•ng h·ªá s·ªë c·ªßa ƒë·ªãa ƒëi·ªÉm v√†o c√¢u c√°
 */
export function applyLocationModifiers(locationId, baseFishRate, baseRareRate) {
  const location = FISHING_LOCATIONS[locationId] || FISHING_LOCATIONS.LAKE;
  
  const modifiedFishRate = baseFishRate * location.modifiers.fishRateMultiplier;
  const modifiedRareRate = baseRareRate + location.modifiers.rareFishBonus;
  
  return {
    fishRate: Math.min(0.95, Math.max(0.05, modifiedFishRate)),
    rareRate: Math.min(0.5, Math.max(0, modifiedRareRate)),
    experienceMultiplier: location.modifiers.experienceMultiplier
  };
}

/**
 * L·∫•y c√° ƒë·∫∑c bi·ªát c·ªßa ƒë·ªãa ƒëi·ªÉm (n·∫øu may m·∫Øn)
 */
export function getLocationSpecialFish(locationId) {
  const location = FISHING_LOCATIONS[locationId];
  if (!location || !location.specialFish) return null;
  
  // Ki·ªÉm tra c√≥ tr√∫ng c√° ƒë·∫∑c bi·ªát kh√¥ng
  for (const specialFish of location.specialFish) {
    if (Math.random() < specialFish.bonus) {
      return {
        name: specialFish.name,
        rarity: specialFish.rarity,
        price: getSpecialFishPrice(specialFish.rarity),
        isSpecial: true,
        location: location.name
      };
    }
  }
  
  return null;
}

/**
 * T√≠nh gi√° c·ªßa c√° ƒë·∫∑c bi·ªát
 */
function getSpecialFishPrice(rarity) {
  const basePrices = {
    common: 50,
    rare: 150,
    legendary: 500,
    mythical: 1500
  };
  
  const basePrice = basePrices[rarity] || 50;
  return Math.floor(basePrice * (1.2 + Math.random() * 0.8)); // 120%-200% c·ªßa gi√° base
}

/**
 * T·∫°o description cho ƒë·ªãa ƒëi·ªÉm
 */
export function getLocationDisplayInfo(locationId, userLevel) {
  const location = FISHING_LOCATIONS[locationId];
  if (!location) return null;
  
  const isUnlocked = userLevel >= location.unlockLevel;
  const canAccess = canFishAtLocation(locationId, userLevel, Infinity); // Ignore balance for display
  
  return {
    ...location,
    isUnlocked,
    canAccess: canAccess.canFish,
    lockReason: !isUnlocked ? `C·∫ßn rod level ${location.unlockLevel}` : 
                !canAccess.canFish ? canAccess.reason : null,
    modifierText: [
      `T·ª∑ l·ªá c√¢u: ${Math.round(location.modifiers.fishRateMultiplier * 100)}%`,
      `C√° hi·∫øm: +${Math.round(location.modifiers.rareFishBonus * 100)}%`,
      `Kinh nghi·ªám: ${Math.round(location.modifiers.experienceMultiplier * 100)}%`
    ].join(' ‚Ä¢ ')
  };
}
