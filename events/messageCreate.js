import { updateQuestProgress } from '../utils/questManager.js';
import { User } from '../schemas/userSchema.js';
import { config } from '../config.js';

export default {
  name: 'messageCreate',
  async execute(message) {
    // B·ªè qua bot messages v√† DM
    if (message.author.bot || !message.guild) return;

    // X·ª≠ l√Ω prefix commands tr∆∞·ªõc
    if (message.content.startsWith(config.prefix)) {
      const args = message.content.slice(config.prefix.length).trim().split(/ +/);
      const commandName = args.shift().toLowerCase();
      
      const command = message.client.commands.get(commandName);
      if (command && command.prefixEnabled) {
        try {
          // T·∫°o fake interaction object ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi slash command code
          const fakeInteraction = {
            user: message.author,
            member: message.member,
            guild: message.guild,
            channel: message.channel,
            client: message.client,
            reply: async (options) => {
              if (typeof options === 'string') {
                return await message.reply(options);
              }
              
              const replyOptions = {};
              if (options.content) replyOptions.content = options.content;
              if (options.embeds) replyOptions.embeds = options.embeds;
              if (options.components) replyOptions.components = options.components;
              if (options.files) replyOptions.files = options.files;
              
              return await message.reply(replyOptions);
            },
            followUp: async (options) => {
              return await message.channel.send(options);
            },
            editReply: async (options) => {
              return await message.channel.send(options);
            },
            deferReply: async () => {
              return await message.channel.sendTyping();
            }
          };
          
          await command.execute(fakeInteraction, args);
          return; // D·ª´ng x·ª≠ l√Ω n·∫øu ƒë√£ th·ª±c hi·ªán prefix command
          
        } catch (error) {
          console.error(`‚ùå Error executing prefix command ${commandName}:`, error);
          await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh!');
          return;
        }
      }
    }

    // C·∫≠p nh·∫≠t quest chat cho channel c·ª• th·ªÉ (s·∫£nh chat)
    if (message.channel.id === '1363492195478540348') {
      try {
        // L·∫•y ho·∫∑c t·∫°o user
        let user = await User.findOne({ discordId: message.author.id });
        if (!user) {
          user = await User.create({ discordId: message.author.id });
        }

        // C·∫≠p nh·∫≠t th·ªëng k√™ chat
        const today = new Date().toISOString().split('T')[0]; // Format: YYYY-MM-DD
        
        // TƒÉng t·ªïng tin nh·∫Øn
        user.chatStats.totalMessages = (user.chatStats.totalMessages || 0) + 1;
        
        // TƒÉng tin nh·∫Øn h√¥m nay
        const todayCount = user.chatStats.dailyMessages.get(today) || 0;
        user.chatStats.dailyMessages.set(today, todayCount + 1);
        
        // C·∫≠p nh·∫≠t ng√†y chat cu·ªëi
        user.chatStats.lastMessageDate = today;
        
        await user.save();

        // C·∫≠p nh·∫≠t quest progress
        await updateQuestProgress(message.author.id, 'chat', 1, { 
          channelId: message.channel.id 
        });

        // Log ƒë·ªÉ debug (c√≥ th·ªÉ b·ªè sau)
        console.log(`üì± ${message.author.username} ƒë√£ chat ${todayCount + 1} tin nh·∫Øn h√¥m nay t·∫°i s·∫£nh`);
        
      } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t chat stats:', error);
      }
    }
  }
};
