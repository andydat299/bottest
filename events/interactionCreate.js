import { claimQuestReward } from '../utils/questManager.js';
import { User } from '../schemas/userSchema.js';

export default {
  name: 'interactionCreate',
  async execute(interaction) {
    // X·ª≠ l√Ω slash commands
    if (interaction.isChatInputCommand()) {
      const command = interaction.client.commands.get(interaction.commandName);
      if (!command) return;

      try {
        await command.execute(interaction);
      } catch (err) {
        console.error(err);
        await interaction.reply({ content: '‚ùå L·ªói khi th·ª±c thi l·ªánh.' });
      }
      return;
    }

    // X·ª≠ l√Ω button interactions
    if (interaction.isButton()) {
      try {
        // X·ª≠ l√Ω c√°c n√∫t help ƒë·ªÉ g·ª£i √Ω l·ªánh slash
        if (interaction.customId.startsWith('help_')) {
          const commandName = interaction.customId.replace('help_', '');
          
          const commandMap = {
            'fish': { cmd: '</fish:0>', desc: 'B·∫Øt ƒë·∫ßu c√¢u c√° v√† th·ª≠ v·∫≠n may!' },
            'inventory': { cmd: '</inventory:0>', desc: 'Xem kho c√° hi·ªán t·∫°i c·ªßa b·∫°n' },
            'sell': { cmd: '</sell:0>', desc: 'B√°n to√†n b·ªô c√° ƒë·ªÉ l·∫•y xu' },
            'cooldown': { cmd: '</cooldown:0>', desc: 'Ki·ªÉm tra th·ªùi gian ch·ªù c√¢u c√°' },
            'profile': { cmd: '</profile:0>', desc: 'Xem h·ªì s∆° v√† th√¥ng tin c√° nh√¢n' },
            'upgrade': { cmd: '</upgrade:0>', desc: 'N√¢ng c·∫•p c·∫ßn c√¢u ƒë·ªÉ c√¢u c√° hi·∫øm h∆°n' },
            'list': { cmd: '</list:0>', desc: 'Xem danh s√°ch t·∫•t c·∫£ lo·∫°i c√° v√† th·ªëng k√™' },
            'stats': { cmd: '</stats:0>', desc: 'Xem th·ªëng k√™ chi ti·∫øt c·ªông ƒë·ªìng' },
            'rates': { cmd: '</rates:0>', desc: 'Xem t·ª∑ l·ªá c√¢u c√° theo rod level' },
            'reset': { cmd: '</reset:0>', desc: 'Reset to√†n b·ªô d·ªØ li·ªáu c·ªßa b·∫°n' },
            'refresh': { cmd: '</help:0>', desc: 'Xem l·∫°i h∆∞·ªõng d·∫´n n√†y' }
          };

          const command = commandMap[commandName];
          if (command) {
            await interaction.reply({
              content: `üéØ **${command.cmd}**\nüìñ ${command.desc}\n\nÔøΩ **C√°ch s·ª≠ d·ª•ng:** Nh·∫•n v√†o l·ªánh m√†u xanh ·ªü tr√™n ho·∫∑c g√µ \`/${commandName}\` trong chat!`,
              ephemeral: true
            });
          } else {
            await interaction.reply({
              content: '‚ùå Kh√¥ng t√¨m th·∫•y l·ªánh t∆∞∆°ng ·ª©ng.',
              ephemeral: true
            });
          }
          return;
        }

        // X·ª≠ l√Ω claim quest rewards
        if (interaction.customId.startsWith('claim_quest_')) {
          await interaction.deferReply({ ephemeral: true });
          
          const questId = interaction.customId.replace('claim_quest_', '');
          const reward = await claimQuestReward(interaction.user.id, questId);
          
          if (reward > 0) {
            // C·∫≠p nh·∫≠t balance user
            const user = await User.findOne({ discordId: interaction.user.id });
            if (user) {
              user.balance += reward;
              await user.save();
            }
            
            await interaction.editReply({
              content: `üéâ **Ch√∫c m·ª´ng!** B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c **${reward} xu** t·ª´ nhi·ªám v·ª•!\nüí∞ S·ªë d∆∞ hi·ªán t·∫°i: **${user.balance.toLocaleString()} xu**`
            });
          } else {
            await interaction.editReply({
              content: '‚ùå Kh√¥ng th·ªÉ nh·∫≠n th∆∞·ªüng. Quest ch∆∞a ho√†n th√†nh ho·∫∑c ƒë√£ ƒë∆∞·ª£c nh·∫≠n r·ªìi.'
            });
          }
          return;
        }

        // X·ª≠ l√Ω c√°c button kh√°c (fish, reset, etc.)
        // Reset buttons ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong reset command collector
        // Fish buttons ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong fish command collector
        
        // ƒê·ªÉ cho c√°c command kh√°c x·ª≠ l√Ω
      } catch (err) {
        console.error('Button interaction error:', err);
        if (!interaction.replied && !interaction.deferred) {
          await interaction.reply({ 
            content: '‚ùå C√≥ l·ªói x·∫£y ra v·ªõi n√∫t b·∫•m.',
            ephemeral: true 
          });
        }
      }
    }
  }
};
