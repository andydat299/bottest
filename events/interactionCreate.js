import { claimQuestReward } from '../utils/questManager.js';
import { User } from '../schemas/userSchema.js';
import { handleResetButton } from '../commands/resetuser.js';
import { 
  startBlackjackGame, 
  hitBlackjack, 
  standBlackjack, 
  cancelBlackjackGame,
  getBlackjackStats
} from '../utils/blackjackGame.js';
import { createGameEmbed, createGameButtons } from '../commands/xidach.js';
import { handleEvalButtons } from '../commands/evalvm.js';
import { handleWheelBetModal, handleWheelGameButtons } from '../commands/wheel.js';
import { 
  EmbedBuilder, 
  ActionRowBuilder, 
  ModalBuilder, 
  TextInputBuilder, 
  TextInputStyle,
  ButtonBuilder,
  ButtonStyle
} from 'discord.js';

export default {
  name: 'interactionCreate',
  async execute(interaction) {
    // X·ª≠ l√Ω slash commands
    if (interaction.isChatInputCommand()) {
      const command = interaction.client.commands.get(interaction.commandName);
      if (!command) return;

      try {
        await command.execute(interaction);
      } catch (err) {
        console.error(err);
        await interaction.reply({ content: '‚ùå L·ªói khi th·ª±c thi l·ªánh.' });
      }
      return;
    }

    // X·ª≠ l√Ω button interactions
    if (interaction.isButton()) {
      try {
        // X·ª≠ l√Ω c√°c n√∫t help ƒë·ªÉ g·ª£i √Ω l·ªánh slash
        if (interaction.customId.startsWith('help_')) {
          const commandName = interaction.customId.replace('help_', '');
          
          const commandMap = {
            'fish': { cmd: '</fish:0>', desc: 'B·∫Øt ƒë·∫ßu c√¢u c√° v√† th·ª≠ v·∫≠n may!' },
            'inventory': { cmd: '</inventory:0>', desc: 'Xem kho c√° hi·ªán t·∫°i c·ªßa b·∫°n' },
            'sell': { cmd: '</sell:0>', desc: 'B√°n to√†n b·ªô c√° ƒë·ªÉ l·∫•y xu' },
            'cooldown': { cmd: '</cooldown:0>', desc: 'Ki·ªÉm tra th·ªùi gian ch·ªù c√¢u c√°' },
            'profile': { cmd: '</profile:0>', desc: 'Xem h·ªì s∆° v√† th√¥ng tin c√° nh√¢n' },
            'upgrade': { cmd: '</upgrade:0>', desc: 'N√¢ng c·∫•p c·∫ßn c√¢u ƒë·ªÉ c√¢u c√° hi·∫øm h∆°n' },
            'list': { cmd: '</list:0>', desc: 'Xem danh s√°ch t·∫•t c·∫£ lo·∫°i c√° v√† th·ªëng k√™' },
            'stats': { cmd: '</stats:0>', desc: 'Xem th·ªëng k√™ chi ti·∫øt c·ªông ƒë·ªìng' },
            'rates': { cmd: '</rates:0>', desc: 'Xem t·ª∑ l·ªá c√¢u c√° theo rod level' },
            'reset': { cmd: '</reset:0>', desc: 'Reset to√†n b·ªô d·ªØ li·ªáu c·ªßa b·∫°n' },
            'refresh': { cmd: '</help:0>', desc: 'Xem l·∫°i h∆∞·ªõng d·∫´n n√†y' }
          };

          const command = commandMap[commandName];
          if (command) {
            await interaction.reply({
              content: `üéØ **${command.cmd}**\nüìñ ${command.desc}\n\nÔøΩ **C√°ch s·ª≠ d·ª•ng:** Nh·∫•n v√†o l·ªánh m√†u xanh ·ªü tr√™n ho·∫∑c g√µ \`/${commandName}\` trong chat!`,
              ephemeral: true
            });
          } else {
            await interaction.reply({
              content: '‚ùå Kh√¥ng t√¨m th·∫•y l·ªánh t∆∞∆°ng ·ª©ng.',
              ephemeral: true
            });
          }
          return;
        }

        // X·ª≠ l√Ω claim quest rewards
        if (interaction.customId.startsWith('claim_quest_')) {
          await interaction.deferReply({ ephemeral: true });
          
          const questId = interaction.customId.replace('claim_quest_', '');
          const reward = await claimQuestReward(interaction.user.id, questId);
          
          if (reward > 0) {
            // C·∫≠p nh·∫≠t balance user
            const user = await User.findOne({ discordId: interaction.user.id });
            if (user) {
              user.balance += reward;
              await user.save();
            }
            
            await interaction.editReply({
              content: `üéâ **Ch√∫c m·ª´ng!** B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c **${reward} xu** t·ª´ nhi·ªám v·ª•!\nüí∞ S·ªë d∆∞ hi·ªán t·∫°i: **${user.balance.toLocaleString()} xu**`
            });
          } else {
            await interaction.editReply({
              content: '‚ùå Kh√¥ng th·ªÉ nh·∫≠n th∆∞·ªüng. Quest ch∆∞a ho√†n th√†nh ho·∫∑c ƒë√£ ƒë∆∞·ª£c nh·∫≠n r·ªìi.'
            });
          }
          return;
        }

        // X·ª≠ l√Ω reset user buttons
        if (interaction.customId.startsWith('reset_')) {
          const handled = await handleResetButton(interaction);
          if (handled) return;
        }

        // X·ª≠ l√Ω eval VM buttons
        if (interaction.customId.startsWith('eval_')) {
          const handled = await handleEvalButtons(interaction);
          if (handled) return;
        }

        // X·ª≠ l√Ω wheel game buttons
        if (interaction.customId.startsWith('wheel_')) {
          const handled = await handleWheelGameButtons(interaction);
          if (handled) return;
        }

        // X·ª≠ l√Ω bot info buttons
        if (interaction.customId.startsWith('bot_')) {
          await handleBotInfoButtons(interaction);
          return;
        }

        // X·ª≠ l√Ω blackjack buttons
        if (interaction.customId.startsWith('blackjack_')) {
          await handleBlackjackButtons(interaction);
          return;
        }

        // X·ª≠ l√Ω game board buttons
        if (interaction.customId.startsWith('start_') || 
            interaction.customId === 'blackjack_rules' || 
            interaction.customId === 'game_stats') {
          await handleGameBoardButtons(interaction);
          return;
        }

        // X·ª≠ l√Ω quest buttons
        if (interaction.customId.startsWith('quest_')) {
          await handleQuestButtons(interaction);
          return;
        }

        // X·ª≠ l√Ω c√°c button kh√°c (fish, reset, etc.)
        // Reset buttons ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong reset command collector
        // Fish buttons ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong fish command collector
        
        // ƒê·ªÉ cho c√°c command kh√°c x·ª≠ l√Ω
      } catch (err) {
        console.error('Button interaction error:', err);
        if (!interaction.replied && !interaction.deferred) {
          await interaction.reply({ 
            content: '‚ùå C√≥ l·ªói x·∫£y ra v·ªõi n√∫t b·∫•m.',
            ephemeral: true 
          });
        }
      }
    }

    // X·ª≠ l√Ω modal submissions
    if (interaction.isModalSubmit()) {
      try {
        if (interaction.customId === 'blackjack_bet_modal') {
          await handleBlackjackBetModal(interaction);
          return;
        }
        if (interaction.customId === 'wheel_bet_modal') {
          await handleWheelBetModal(interaction);
          return;
        }
      } catch (err) {
        console.error('Modal submission error:', err);
        if (!interaction.replied && !interaction.deferred) {
          await interaction.reply({ 
            content: '‚ùå C√≥ l·ªói x·∫£y ra v·ªõi modal.',
            ephemeral: true 
          });
        }
      }
    }
  }
};

// X·ª≠ l√Ω modal nh·∫≠p s·ªë xu c∆∞·ª£c
async function handleBlackjackBetModal(interaction) {
  const betAmountStr = interaction.fields.getTextInputValue('bet_amount');
  const betAmount = parseInt(betAmountStr);

  if (isNaN(betAmount) || betAmount <= 0) {
    await interaction.reply({
      content: '‚ùå S·ªë xu c∆∞·ª£c kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë nguy√™n d∆∞∆°ng.',
      ephemeral: true
    });
    return;
  }

  const result = await startBlackjackGame(interaction.user.id, betAmount);

  if (!result.success) {
    await interaction.reply({
      content: result.message,
      ephemeral: true
    });
    return;
  }

  const embed = createGameEmbed(result.game, interaction.user);
  const buttons = createGameButtons(result.game);

  await interaction.reply({
    content: result.message,
    embeds: [embed],
    components: buttons ? [buttons] : [],
    ephemeral: true
  });
}

// X·ª≠ l√Ω buttons trong game blackjack
async function handleBlackjackButtons(interaction) {
  const action = interaction.customId.replace('blackjack_', '');

  switch (action) {
    case 'hit':
      const hitResult = hitBlackjack(interaction.user.id);
      if (!hitResult.success) {
        await interaction.reply({
          content: hitResult.message,
          ephemeral: true
        });
        return;
      }

      const hitEmbed = createGameEmbed(hitResult.game, interaction.user);
      const hitButtons = createGameButtons(hitResult.game);

      await interaction.update({
        embeds: [hitEmbed],
        components: hitButtons ? [hitButtons] : []
      });
      break;

    case 'stand':
      const standResult = await standBlackjack(interaction.user.id);
      if (!standResult.success) {
        await interaction.reply({
          content: standResult.message,
          ephemeral: true
        });
        return;
      }

      const standEmbed = createGameEmbed(standResult.game, interaction.user);
      
      // Th√™m k·∫øt qu·∫£ cu·ªëi game
      if (standResult.result) {
        standEmbed.addFields({
          name: 'üí∞ K·∫øt qu·∫£ c∆∞·ª£c',
          value: `${standResult.result.resultMessage}\n**${standResult.result.winAmount >= 0 ? '+' : ''}${standResult.result.winAmount.toLocaleString()} xu**`,
          inline: false
        });
      }

      await interaction.update({
        embeds: [standEmbed],
        components: [] // X√≥a buttons khi game k·∫øt th√∫c
      });
      break;

    case 'cancel':
      const cancelResult = await cancelBlackjackGame(interaction.user.id);
      
      const cancelEmbed = new EmbedBuilder()
        .setTitle('‚ùå Game ƒë√£ h·ªßy')
        .setDescription(cancelResult.message)
        .setColor('#ff0000')
        .setTimestamp();

      await interaction.update({
        embeds: [cancelEmbed],
        components: []
      });
      break;
  }
}

// X·ª≠ l√Ω buttons t·ª´ game board
async function handleGameBoardButtons(interaction) {
  switch (interaction.customId) {
    case 'start_blackjack':
      // Hi·ªÉn th·ªã modal ƒë·ªÉ nh·∫≠p s·ªë xu c∆∞·ª£c
      const modal = new ModalBuilder()
        .setCustomId('blackjack_bet_modal')
        .setTitle('üé¥ Nh·∫≠p s·ªë xu c∆∞·ª£c');

      const betInput = new TextInputBuilder()
        .setCustomId('bet_amount')
        .setLabel('S·ªë Xu C∆∞·ª£c')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('Nh·∫≠p 1-1000 xu')
        .setRequired(true)
        .setMinLength(1)
        .setMaxLength(4);

      const actionRow = new ActionRowBuilder().addComponents(betInput);
      modal.addComponents(actionRow);

      await interaction.showModal(modal);
      break;

    case 'blackjack_rules':
      const rulesEmbed = new EmbedBuilder()
        .setTitle('üé¥ LU·∫¨T CH∆†I X√å D√ÅCH')
        .setDescription('**M·ª•c ti√™u:** ƒê·∫°t t·ªïng ƒëi·ªÉm g·∫ßn 21 nh·∫•t m√† kh√¥ng v∆∞·ª£t qu√° 21')
        .addFields(
          {
            name: 'üÉè Gi√° tr·ªã b√†i',
            value: '‚Ä¢ **A**: 1 ho·∫∑c 11 ƒëi·ªÉm (t·ª± ƒë·ªông ch·ªçn t·ªët nh·∫•t)\n‚Ä¢ **2-10**: Theo s·ªë tr√™n b√†i\n‚Ä¢ **J, Q, K**: 10 ƒëi·ªÉm',
            inline: false
          },
          {
            name: 'üéØ C√°ch ch∆°i',
            value: '‚Ä¢ **Hit**: R√∫t th√™m b√†i\n‚Ä¢ **Stand**: D·ª´ng l·∫°i\n‚Ä¢ **Blackjack**: A + 10/J/Q/K (21 ƒëi·ªÉm v·ªõi 2 b√†i)\n‚Ä¢ **Bust**: V∆∞·ª£t qu√° 21 ƒëi·ªÉm (thua ngay)',
            inline: false
          },
          {
            name: 'ü§ñ Lu·∫≠t Dealer',
            value: '‚Ä¢ Ph·∫£i r√∫t b√†i n·∫øu < 17 ƒëi·ªÉm\n‚Ä¢ Ph·∫£i d·ª´ng n·∫øu ‚â• 17 ƒëi·ªÉm\n‚Ä¢ L√° th·ª© 2 b·ªã √∫p',
            inline: false
          },
          {
            name: 'üí∞ T·ª∑ l·ªá th∆∞·ªüng',
            value: '‚Ä¢ **Blackjack**: 1.8x ti·ªÅn c∆∞·ª£c\n‚Ä¢ **Th·∫Øng th∆∞·ªùng**: 1.8x ti·ªÅn c∆∞·ª£c\n‚Ä¢ **H√≤a**: Ho√†n ti·ªÅn c∆∞·ª£c\n‚Ä¢ **Thua**: M·∫•t ti·ªÅn c∆∞·ª£c',
            inline: false
          },
          {
            name: '‚öôÔ∏è C·∫•u h√¨nh',
            value: '‚Ä¢ C∆∞·ª£c t·ªëi thi·ªÉu: **1 xu**\n‚Ä¢ C∆∞·ª£c t·ªëi ƒëa: **1,000 xu**\n‚Ä¢ T·ª∑ l·ªá th·∫Øng: **30%** (kh√≥ th·∫Øng)\n‚Ä¢ S·ªë b·ªô b√†i: **1 b·ªô** (t·ª± ƒë·ªông x√°o l·∫°i)',
            inline: false
          }
        )
        .setColor('#ffdd57')
        .setFooter({ text: '·∫§n n√∫t "Ch∆°i X√¨ D√°ch" ƒë·ªÉ b·∫Øt ƒë·∫ßu!' });

      await interaction.reply({ embeds: [rulesEmbed], ephemeral: true });
      break;

    case 'game_stats':
      const stats = await getBlackjackStats(interaction.user.id);
      
      if (!stats) {
        await interaction.reply({
          content: '‚ùå B·∫°n ch∆∞a ch∆°i game x√¨ d√°ch n√†o!',
          ephemeral: true
        });
        return;
      }

      const statsEmbed = new EmbedBuilder()
        .setTitle('üé¥ Th·ªëng k√™ X√¨ D√°ch')
        .setDescription(`**${interaction.user.username}**`)
        .addFields(
          { name: 'üéÆ S·ªë game ƒë√£ ch∆°i', value: `${stats.gamesPlayed.toLocaleString()} game`, inline: true },
          { name: 'üí∞ T·ªïng th·∫Øng/thua', value: `${stats.totalWinnings.toLocaleString()} xu`, inline: true },
          { name: 'üìä T·ª∑ l·ªá th·∫Øng', value: `${stats.winRate}%`, inline: true }
        )
        .setColor(stats.totalWinnings >= 0 ? '#00ff00' : '#ff0000')
        .setThumbnail(interaction.user.displayAvatarURL())
        .setTimestamp();

      await interaction.reply({ embeds: [statsEmbed], ephemeral: true });
      break;
  }
}

// Function x·ª≠ l√Ω bot info buttons
async function handleBotInfoButtons(interaction) {
  const action = interaction.customId.replace('bot_', '');
  
  switch (action) {
    case 'help':
      await showCommandsHelp(interaction);
      break;
    case 'stats':
      await showServerStats(interaction);
      break;
    case 'games':
      await showGamesInfo(interaction);
      break;
  }
}

async function showCommandsHelp(interaction) {
  const embed = new EmbedBuilder()
    .setTitle('üìã Danh s√°ch Commands')
    .setDescription('**T·∫•t c·∫£ l·ªánh c√≥ s·∫µn trong bot:**')
    .addFields(
      {
        name: 'üé£ Fishing Commands',
        value: 
          '`/fish` - C√¢u c√° ƒë·ªÉ ki·∫øm xu\n' +
          '`/inventory` - Xem t√∫i ƒë·ªì\n' +
          '`/upgrade` - N√¢ng c·∫•p c·∫ßn c√¢u\n' +
          '`/repair` - S·ª≠a ch·ªØa c·∫ßn c√¢u\n' +
          '`/rates` - Xem t·ª∑ l·ªá c√¢u c√°',
        inline: true
      },
      {
        name: 'üéÆ Casino & Games',
        value: 
          '`/wheel post` - Game v√≤ng quay (Admin)\n' +
          '`/wheel play` - Ch∆°i v√≤ng quay\n' +
          '`/xidach` - Blackjack game\n' +
          '`/wheel stats` - Th·ªëng k√™ games',
        inline: true
      },
      {
        name: 'üë§ User Commands',
        value: 
          '`/profile` - Xem h·ªì s∆° c√° nh√¢n\n' +
          '`/stats` - Th·ªëng k√™ fishing\n' +
          '`/quests` - Xem nhi·ªám v·ª•\n' +
          '`/cooldown` - Ki·ªÉm tra th·ªùi gian ch·ªù',
        inline: true
      },
      {
        name: 'üìä Info Commands',
        value: 
          '`/help` - H∆∞·ªõng d·∫´n chi ti·∫øt\n' +
          '`/list` - Danh s√°ch t·∫•t c·∫£ c√°\n' +
          '`/leaderboard` - B·∫£ng x·∫øp h·∫°ng\n' +
          '`/fishstats` - Th·ªëng k√™ c·ªông ƒë·ªìng',
        inline: true
      },
      {
        name: 'üí° Tips',
        value: 
          '‚Ä¢ Chat ƒë·ªÉ nh·∫≠n xu th∆∞·ªüng\n' +
          '‚Ä¢ Ho√†n th√†nh quests ƒë·ªÉ ki·∫øm th√™m\n' +
          '‚Ä¢ N√¢ng c·∫•p c·∫ßn ƒë·ªÉ c√¢u c√° hi·∫øm\n' +
          '‚Ä¢ Ch∆°i minigames ƒë·ªÉ th·ª≠ v·∫≠n may',
        inline: false
      }
    )
    .setColor('#3498db')
    .setFooter({ text: 'S·ª≠ d·ª•ng /help [command] ƒë·ªÉ xem chi ti·∫øt t·ª´ng l·ªánh' });

  await interaction.reply({ embeds: [embed], ephemeral: true });
}

async function showServerStats(interaction) {
  const guild = interaction.guild;
  const client = interaction.client;
  
  // ƒê·∫øm users trong database (c·∫ßn import User schema)
  let totalUsers = 0;
  try {
    totalUsers = await User.countDocuments();
  } catch (error) {
    console.log('Kh√¥ng th·ªÉ ƒë·∫øm users trong DB');
  }

  const embed = new EmbedBuilder()
    .setTitle(`üìä Th·ªëng k√™ Server: ${guild.name}`)
    .setThumbnail(guild.iconURL({ dynamic: true }))
    .addFields(
      {
        name: 'üë• Th√†nh vi√™n',
        value: 
          `**Total:** ${guild.memberCount.toLocaleString()}\n` +
          `**Online:** ${guild.members.cache.filter(m => m.presence?.status !== 'offline').size}\n` +
          `**Bots:** ${guild.members.cache.filter(m => m.user.bot).size}`,
        inline: true
      },
      {
        name: 'üì∫ Channels',
        value: 
          `**Text:** ${guild.channels.cache.filter(c => c.type === 0).size}\n` +
          `**Voice:** ${guild.channels.cache.filter(c => c.type === 2).size}\n` +
          `**Categories:** ${guild.channels.cache.filter(c => c.type === 4).size}`,
        inline: true
      },
      {
        name: 'üéÆ Bot Stats',
        value: 
          `**Servers:** ${client.guilds.cache.size}\n` +
          `**Users:** ${client.users.cache.size.toLocaleString()}\n` +
          `**DB Users:** ${totalUsers.toLocaleString()}`,
        inline: true
      },
      {
        name: 'üìÖ Server Info',
        value: 
          `**Created:** <t:${Math.floor(guild.createdTimestamp / 1000)}:R>\n` +
          `**Owner:** <@${guild.ownerId}>\n` +
          `**Boost Level:** ${guild.premiumTier}`,
        inline: true
      },
      {
        name: '‚ö° Performance',
        value: 
          `**Uptime:** ${formatUptime(client.uptime)}\n` +
          `**Ping:** ${client.ws.ping}ms\n` +
          `**Memory:** ${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)}MB`,
        inline: true
      }
    )
    .setColor('#e74c3c')
    .setFooter({ 
      text: `Stats ƒë∆∞·ª£c c·∫≠p nh·∫≠t l√∫c`,
      iconURL: client.user.displayAvatarURL() 
    })
    .setTimestamp();

  await interaction.reply({ embeds: [embed], ephemeral: true });
}

async function showGamesInfo(interaction) {
  const embed = new EmbedBuilder()
    .setTitle('üéÆ Games & Minigames')
    .setDescription('**Kh√°m ph√° c√°c tr√≤ ch∆°i th√∫ v·ªã trong bot!**')
    .addFields(
      {
        name: 'üé£ Fishing System',
        value: 
          '‚Ä¢ C√¢u c√° ƒë·ªÉ ki·∫øm xu v√† s∆∞u t·∫≠p\n' +
          '‚Ä¢ 20+ lo·∫°i c√° v·ªõi ƒë·ªô hi·∫øm kh√°c nhau\n' +
          '‚Ä¢ N√¢ng c·∫•p c·∫ßn c√¢u ƒë·ªÉ tƒÉng t·ª∑ l·ªá\n' +
          '‚Ä¢ H·ªá th·ªëng nhi·ªám v·ª• ƒëa d·∫°ng',
        inline: false
      },
      {
        name: 'üé¥ Blackjack (X√¨ D√°ch)',
        value: 
          '‚Ä¢ Casino game kinh ƒëi·ªÉn\n' +
          '‚Ä¢ C∆∞·ª£c 1-1000 xu, th·∫Øng x1.8\n' +
          '‚Ä¢ AI dealer th√¥ng minh\n' +
          '‚Ä¢ Th·ªëng k√™ chi ti·∫øt',
        inline: true
      },
      {
        name: 'üé° Wheel of Fortune',
        value: 
          '‚Ä¢ V√≤ng quay may m·∫Øn 7 √¥n' +
          '‚Ä¢ Jackpot x10 c·ª±c hi·∫øm\n' +
          '‚Ä¢ Admin post game board\n' +
          '‚Ä¢ House edge c√¢n b·∫±ng',
        inline: true
      },
      {
        name: 'üí¨ Chat Rewards',
        value: 
          '‚Ä¢ Nh·∫≠n xu khi chat t√≠ch c·ª±c\n' +
          '‚Ä¢ Bonus streak cho ho·∫°t ƒë·ªông li√™n t·ª•c\n' +
          '‚Ä¢ Anti-spam protection\n' +
          '‚Ä¢ Daily bonus multiplier',
        inline: false
      },
      {
        name: 'üéØ C√°ch b·∫Øt ƒë·∫ßu',
        value: 
          '**Fishing:** `/fish` ƒë·ªÉ c√¢u c√° ƒë·∫ßu ti√™n\n' +
          '**Blackjack:** `/xidach rules` xem lu·∫≠t ch∆°i\n' +
          '**Wheel:** ƒê·ª£i admin post game board\n' +
          '**Profile:** `/profile` xem ti·∫øn ƒë·ªô',
        inline: false
      }
    )
    .setColor('#f39c12')
    .setFooter({ text: 'Ch∆°i c√≥ tr√°ch nhi·ªám v√† t·∫≠n h∆∞·ªüng!' });

  await interaction.reply({ embeds: [embed], ephemeral: true });
}

// X·ª≠ l√Ω quest buttons
async function handleQuestButtons(interaction) {
  try {
    const { getUserQuests, generateDailyQuests, claimAllQuests } = await import('../utils/enhancedQuestManager.js');

    if (interaction.customId === 'quest_refresh') {
      // Refresh quest display
      const quests = await getUserQuests(interaction.user.id);
      
      const embed = new EmbedBuilder()
        .setTitle('üéØ NHI·ªÜM V·ª§ C·ª¶A B·∫†N')
        .setColor('#4CAF50')
        .setThumbnail(interaction.user.displayAvatarURL())
        .setTimestamp();

      let questList = '';
      let claimableQuests = [];
      let totalRewardToday = 0;
      
      const today = new Date().toDateString();
      const todayQuests = quests.filter(q => new Date(q.createdAt).toDateString() === today);
      
      quests.forEach((quest) => {
        const progressBar = createProgressBar(quest.progress, quest.target);
        const progressPercent = Math.round((quest.progress / quest.target) * 100);
        
        let statusIcon = '‚è≥';
        if (quest.isCompleted && quest.isClaimed) {
          statusIcon = '‚úÖ';
        } else if (quest.isCompleted) {
          statusIcon = 'üéÅ';
          claimableQuests.push(quest);
        }
        
        questList += `${statusIcon} **${quest.name}**\n`;
        questList += `üìú ${quest.description}\n`;
        questList += `${progressBar} **${quest.progress}/${quest.target}** (${progressPercent}%)\n`;
        questList += `üí∞ **${quest.reward} xu**\n\n`;
        
        if (new Date(quest.createdAt).toDateString() === today) {
          totalRewardToday += quest.reward;
        }
      });

      embed.setDescription(questList || 'Kh√¥ng c√≥ quest n√†o.');
      
      if (claimableQuests.length > 0) {
        embed.setFooter({ text: `üéÅ ${claimableQuests.length} quest ho√†n th√†nh! ‚Ä¢ H√¥m nay: ${totalRewardToday}/1000 xu` });
      } else {
        embed.setFooter({ text: `üìä Quest h√¥m nay: ${todayQuests.length}/3 ‚Ä¢ Th∆∞·ªüng: ${totalRewardToday}/1000 xu` });
      }

      // Update buttons
      const buttons = new ActionRowBuilder();
      
      buttons.addComponents(
        new ButtonBuilder()
          .setCustomId('quest_refresh')
          .setLabel('üîÑ L√†m m·ªõi')
          .setStyle(ButtonStyle.Secondary)
      );

      if (claimableQuests.length > 0) {
        buttons.addComponents(
          new ButtonBuilder()
            .setCustomId('quest_claim_all')
            .setLabel(`üéÅ Nh·∫≠n th∆∞·ªüng (${claimableQuests.length})`)
            .setStyle(ButtonStyle.Success)
        );
      }

      if (todayQuests.length < 3) {
        buttons.addComponents(
          new ButtonBuilder()
            .setCustomId('quest_generate_more')
            .setLabel('‚ûï T·∫°o quest m·ªõi')
            .setStyle(ButtonStyle.Primary)
        );
      }

      await interaction.update({ 
        embeds: [embed], 
        components: [buttons] 
      });

    } else if (interaction.customId === 'quest_claim_all') {
      // Claim all completed quests
      await interaction.deferUpdate();
      
      const result = await claimAllQuests(interaction.user.id);
      
      if (result.count === 0) {
        await interaction.followUp({
          content: '‚ùå Kh√¥ng c√≥ quest n√†o ƒë·ªÉ nh·∫≠n th∆∞·ªüng!',
          ephemeral: true
        });
        return;
      }

      // Show success message
      const successEmbed = new EmbedBuilder()
        .setTitle('üéÅ NH·∫¨N TH∆Ø·ªûNG TH√ÄNH C√îNG!')
        .setDescription(`**B·∫°n ƒë√£ nh·∫≠n th∆∞·ªüng t·ª´ ${result.count} quest!**`)
        .addFields(
          { name: 'üéÅ S·ªë quest', value: `${result.count}`, inline: true },
          { name: 'üí∞ T·ªïng th∆∞·ªüng', value: `${result.totalReward.toLocaleString()} xu`, inline: true }
        )
        .setColor('#00ff00')
        .setTimestamp();

      await interaction.followUp({
        embeds: [successEmbed],
        ephemeral: true
      });

      // Refresh the quest display
      setTimeout(async () => {
        try {
          const updatedQuests = await getUserQuests(interaction.user.id);
          
          const embed = new EmbedBuilder()
            .setTitle('üéØ NHI·ªÜM V·ª§ C·ª¶A B·∫†N')
            .setColor('#4CAF50')
            .setThumbnail(interaction.user.displayAvatarURL())
            .setTimestamp();

          let questList = '';
          let claimableQuests = [];
          let totalRewardToday = 0;
          
          const today = new Date().toDateString();
          const todayQuests = updatedQuests.filter(q => new Date(q.createdAt).toDateString() === today);
          
          updatedQuests.forEach((quest) => {
            const progressBar = createProgressBar(quest.progress, quest.target);
            const progressPercent = Math.round((quest.progress / quest.target) * 100);
            
            let statusIcon = '‚è≥';
            if (quest.isCompleted && quest.isClaimed) {
              statusIcon = '‚úÖ';
            } else if (quest.isCompleted) {
              statusIcon = 'üéÅ';
              claimableQuests.push(quest);
            }
            
            questList += `${statusIcon} **${quest.name}**\n`;
            questList += `üìú ${quest.description}\n`;
            questList += `${progressBar} **${quest.progress}/${quest.target}** (${progressPercent}%)\n`;
            questList += `üí∞ **${quest.reward} xu**\n\n`;
            
            if (new Date(quest.createdAt).toDateString() === today) {
              totalRewardToday += quest.reward;
            }
          });

          embed.setDescription(questList || 'T·∫•t c·∫£ quest ƒë√£ ho√†n th√†nh!');
          embed.setFooter({ text: `üìä Quest h√¥m nay: ${todayQuests.length}/3 ‚Ä¢ Th∆∞·ªüng: ${totalRewardToday}/1000 xu` });

          const buttons = new ActionRowBuilder();
          
          buttons.addComponents(
            new ButtonBuilder()
              .setCustomId('quest_refresh')
              .setLabel('üîÑ L√†m m·ªõi')
              .setStyle(ButtonStyle.Secondary)
          );

          if (todayQuests.length < 3) {
            buttons.addComponents(
              new ButtonBuilder()
                .setCustomId('quest_generate_more')
                .setLabel('‚ûï T·∫°o quest m·ªõi')
                .setStyle(ButtonStyle.Primary)
            );
          }

          await interaction.editReply({ 
            embeds: [embed], 
            components: [buttons] 
          });
        } catch (error) {
          console.error('Error refreshing quest display:', error);
        }
      }, 1000);

    } else if (interaction.customId === 'quest_generate_more') {
      // Generate more quests
      await interaction.deferUpdate();
      
      try {
        const result = await generateDailyQuests(interaction.user.id);
        
        const successEmbed = new EmbedBuilder()
          .setTitle('‚ú® QUEST M·ªöI ƒê√É T·∫†O!')
          .setDescription(`**${result.newQuests.length} quest m·ªõi:**`)
          .setColor('#00ff00')
          .setTimestamp();

        let questDescription = '';
        result.newQuests.forEach((quest, index) => {
          questDescription += `**${index + 1}.** ${quest.name}\n`;
          questDescription += `üìú ${quest.description}\n`;
          questDescription += `üí∞ **${quest.reward} xu**\n\n`;
        });

        successEmbed.setDescription(questDescription);
        successEmbed.addFields(
          { name: 'üìä Quest h√¥m nay', value: `${result.totalQuests}/3`, inline: true },
          { name: 'üí∞ Th∆∞·ªüng h√¥m nay', value: `${result.totalRewardToday}/1000 xu`, inline: true }
        );

        await interaction.followUp({
          embeds: [successEmbed],
          ephemeral: true
        });

        // Auto refresh sau 1s
        setTimeout(async () => {
          const buttons = new ActionRowBuilder()
            .addComponents(
              new ButtonBuilder()
                .setCustomId('quest_refresh')
                .setLabel('üîÑ L√†m m·ªõi ƒë·ªÉ xem quest m·ªõi')
                .setStyle(ButtonStyle.Success)
            );

          await interaction.editReply({ 
            components: [buttons] 
          });
        }, 1000);

      } catch (error) {
        await interaction.followUp({
          content: `‚ùå **L·ªói t·∫°o quest:**\n\`${error.message}\`",
          ephemeral: true
        });
      }
    }

  } catch (error) {
    console.error('Error handling quest button:', error);
    await interaction.reply({
      content: '‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω n√∫t b·∫•m!',
      ephemeral: true
    });
  }
}

function createProgressBar(current, target, length = 15) {
  const progress = Math.min(current / target, 1);
  const filled = Math.round(progress * length);
  const empty = length - filled;
  
  const filledBar = '‚ñà'.repeat(filled);
  const emptyBar = '‚ñë'.repeat(empty);
  
  return `\`${filledBar}${emptyBar}\``;
}

// Helper function ƒë·ªÉ format uptime (duplicate, c√≥ th·ªÉ move ra utils)
function formatUptime(ms) {
  const seconds = Math.floor((ms / 1000) % 60);
  const minutes = Math.floor((ms / (1000 * 60)) % 60);
  const hours = Math.floor((ms / (1000 * 60 * 60)) % 24);
  const days = Math.floor(ms / (1000 * 60 * 60 * 24));

  if (days > 0) {
    return `${days}d ${hours}h ${minutes}m`;
  } else if (hours > 0) {
    return `${hours}h ${minutes}m`;
  } else {
    return `${minutes}m ${seconds}s`;
  }
}
