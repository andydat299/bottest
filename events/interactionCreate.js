import { claimQuestReward } from '../utils/questManager.js';
import { User } from '../schemas/userSchema.js';
import { handleResetButton } from '../commands/resetuser.js';
import { 
  startBlackjackGame, 
  hitBlackjack, 
  standBlackjack, 
  cancelBlackjackGame,
  getBlackjackStats
} from '../utils/blackjackGame.js';
import { createGameEmbed, createGameButtons } from '../commands/xidach.js';
import { handleEvalButtons } from '../commands/evalvm.js';
import { handleWheelBetModal } from '../commands/wheel.js';
import { 
  EmbedBuilder, 
  ActionRowBuilder, 
  ModalBuilder, 
  TextInputBuilder, 
  TextInputStyle 
} from 'discord.js';

export default {
  name: 'interactionCreate',
  async execute(interaction) {
    // X·ª≠ l√Ω slash commands
    if (interaction.isChatInputCommand()) {
      const command = interaction.client.commands.get(interaction.commandName);
      if (!command) return;

      try {
        await command.execute(interaction);
      } catch (err) {
        console.error(err);
        await interaction.reply({ content: '‚ùå L·ªói khi th·ª±c thi l·ªánh.' });
      }
      return;
    }

    // X·ª≠ l√Ω button interactions
    if (interaction.isButton()) {
      try {
        // X·ª≠ l√Ω c√°c n√∫t help ƒë·ªÉ g·ª£i √Ω l·ªánh slash
        if (interaction.customId.startsWith('help_')) {
          const commandName = interaction.customId.replace('help_', '');
          
          const commandMap = {
            'fish': { cmd: '</fish:0>', desc: 'B·∫Øt ƒë·∫ßu c√¢u c√° v√† th·ª≠ v·∫≠n may!' },
            'inventory': { cmd: '</inventory:0>', desc: 'Xem kho c√° hi·ªán t·∫°i c·ªßa b·∫°n' },
            'sell': { cmd: '</sell:0>', desc: 'B√°n to√†n b·ªô c√° ƒë·ªÉ l·∫•y xu' },
            'cooldown': { cmd: '</cooldown:0>', desc: 'Ki·ªÉm tra th·ªùi gian ch·ªù c√¢u c√°' },
            'profile': { cmd: '</profile:0>', desc: 'Xem h·ªì s∆° v√† th√¥ng tin c√° nh√¢n' },
            'upgrade': { cmd: '</upgrade:0>', desc: 'N√¢ng c·∫•p c·∫ßn c√¢u ƒë·ªÉ c√¢u c√° hi·∫øm h∆°n' },
            'list': { cmd: '</list:0>', desc: 'Xem danh s√°ch t·∫•t c·∫£ lo·∫°i c√° v√† th·ªëng k√™' },
            'stats': { cmd: '</stats:0>', desc: 'Xem th·ªëng k√™ chi ti·∫øt c·ªông ƒë·ªìng' },
            'rates': { cmd: '</rates:0>', desc: 'Xem t·ª∑ l·ªá c√¢u c√° theo rod level' },
            'reset': { cmd: '</reset:0>', desc: 'Reset to√†n b·ªô d·ªØ li·ªáu c·ªßa b·∫°n' },
            'refresh': { cmd: '</help:0>', desc: 'Xem l·∫°i h∆∞·ªõng d·∫´n n√†y' }
          };

          const command = commandMap[commandName];
          if (command) {
            await interaction.reply({
              content: `üéØ **${command.cmd}**\nüìñ ${command.desc}\n\nÔøΩ **C√°ch s·ª≠ d·ª•ng:** Nh·∫•n v√†o l·ªánh m√†u xanh ·ªü tr√™n ho·∫∑c g√µ \`/${commandName}\` trong chat!`,
              ephemeral: true
            });
          } else {
            await interaction.reply({
              content: '‚ùå Kh√¥ng t√¨m th·∫•y l·ªánh t∆∞∆°ng ·ª©ng.',
              ephemeral: true
            });
          }
          return;
        }

        // X·ª≠ l√Ω claim quest rewards
        if (interaction.customId.startsWith('claim_quest_')) {
          await interaction.deferReply({ ephemeral: true });
          
          const questId = interaction.customId.replace('claim_quest_', '');
          const reward = await claimQuestReward(interaction.user.id, questId);
          
          if (reward > 0) {
            // C·∫≠p nh·∫≠t balance user
            const user = await User.findOne({ discordId: interaction.user.id });
            if (user) {
              user.balance += reward;
              await user.save();
            }
            
            await interaction.editReply({
              content: `üéâ **Ch√∫c m·ª´ng!** B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c **${reward} xu** t·ª´ nhi·ªám v·ª•!\nüí∞ S·ªë d∆∞ hi·ªán t·∫°i: **${user.balance.toLocaleString()} xu**`
            });
          } else {
            await interaction.editReply({
              content: '‚ùå Kh√¥ng th·ªÉ nh·∫≠n th∆∞·ªüng. Quest ch∆∞a ho√†n th√†nh ho·∫∑c ƒë√£ ƒë∆∞·ª£c nh·∫≠n r·ªìi.'
            });
          }
          return;
        }

        // X·ª≠ l√Ω reset user buttons
        if (interaction.customId.startsWith('reset_')) {
          const handled = await handleResetButton(interaction);
          if (handled) return;
        }

        // X·ª≠ l√Ω eval VM buttons
        if (interaction.customId.startsWith('eval_')) {
          const handled = await handleEvalButtons(interaction);
          if (handled) return;
        }

        // X·ª≠ l√Ω blackjack buttons
        if (interaction.customId.startsWith('blackjack_')) {
          await handleBlackjackButtons(interaction);
          return;
        }

        // X·ª≠ l√Ω game board buttons
        if (interaction.customId.startsWith('start_') || 
            interaction.customId === 'blackjack_rules' || 
            interaction.customId === 'game_stats') {
          await handleGameBoardButtons(interaction);
          return;
        }

        // X·ª≠ l√Ω c√°c button kh√°c (fish, reset, etc.)
        // Reset buttons ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong reset command collector
        // Fish buttons ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong fish command collector
        
        // ƒê·ªÉ cho c√°c command kh√°c x·ª≠ l√Ω
      } catch (err) {
        console.error('Button interaction error:', err);
        if (!interaction.replied && !interaction.deferred) {
          await interaction.reply({ 
            content: '‚ùå C√≥ l·ªói x·∫£y ra v·ªõi n√∫t b·∫•m.',
            ephemeral: true 
          });
        }
      }
    }

    // X·ª≠ l√Ω modal submissions
    if (interaction.isModalSubmit()) {
      try {
        if (interaction.customId === 'blackjack_bet_modal') {
          await handleBlackjackBetModal(interaction);
          return;
        }
        if (interaction.customId === 'wheel_bet_modal') {
          await handleWheelBetModal(interaction);
          return;
        }
      } catch (err) {
        console.error('Modal submission error:', err);
        if (!interaction.replied && !interaction.deferred) {
          await interaction.reply({ 
            content: '‚ùå C√≥ l·ªói x·∫£y ra v·ªõi modal.',
            ephemeral: true 
          });
        }
      }
    }
  }
};

// X·ª≠ l√Ω modal nh·∫≠p s·ªë xu c∆∞·ª£c
async function handleBlackjackBetModal(interaction) {
  const betAmountStr = interaction.fields.getTextInputValue('bet_amount');
  const betAmount = parseInt(betAmountStr);

  if (isNaN(betAmount) || betAmount <= 0) {
    await interaction.reply({
      content: '‚ùå S·ªë xu c∆∞·ª£c kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë nguy√™n d∆∞∆°ng.',
      ephemeral: true
    });
    return;
  }

  const result = await startBlackjackGame(interaction.user.id, betAmount);

  if (!result.success) {
    await interaction.reply({
      content: result.message,
      ephemeral: true
    });
    return;
  }

  const embed = createGameEmbed(result.game, interaction.user);
  const buttons = createGameButtons(result.game);

  await interaction.reply({
    content: result.message,
    embeds: [embed],
    components: buttons ? [buttons] : [],
    ephemeral: true
  });
}

// X·ª≠ l√Ω buttons trong game blackjack
async function handleBlackjackButtons(interaction) {
  const action = interaction.customId.replace('blackjack_', '');

  switch (action) {
    case 'hit':
      const hitResult = hitBlackjack(interaction.user.id);
      if (!hitResult.success) {
        await interaction.reply({
          content: hitResult.message,
          ephemeral: true
        });
        return;
      }

      const hitEmbed = createGameEmbed(hitResult.game, interaction.user);
      const hitButtons = createGameButtons(hitResult.game);

      await interaction.update({
        embeds: [hitEmbed],
        components: hitButtons ? [hitButtons] : []
      });
      break;

    case 'stand':
      const standResult = await standBlackjack(interaction.user.id);
      if (!standResult.success) {
        await interaction.reply({
          content: standResult.message,
          ephemeral: true
        });
        return;
      }

      const standEmbed = createGameEmbed(standResult.game, interaction.user);
      
      // Th√™m k·∫øt qu·∫£ cu·ªëi game
      if (standResult.result) {
        standEmbed.addFields({
          name: 'üí∞ K·∫øt qu·∫£ c∆∞·ª£c',
          value: `${standResult.result.resultMessage}\n**${standResult.result.winAmount >= 0 ? '+' : ''}${standResult.result.winAmount.toLocaleString()} xu**`,
          inline: false
        });
      }

      await interaction.update({
        embeds: [standEmbed],
        components: [] // X√≥a buttons khi game k·∫øt th√∫c
      });
      break;

    case 'cancel':
      const cancelResult = await cancelBlackjackGame(interaction.user.id);
      
      const cancelEmbed = new EmbedBuilder()
        .setTitle('‚ùå Game ƒë√£ h·ªßy')
        .setDescription(cancelResult.message)
        .setColor('#ff0000')
        .setTimestamp();

      await interaction.update({
        embeds: [cancelEmbed],
        components: []
      });
      break;
  }
}

// X·ª≠ l√Ω buttons t·ª´ game board
async function handleGameBoardButtons(interaction) {
  switch (interaction.customId) {
    case 'start_blackjack':
      // Hi·ªÉn th·ªã modal ƒë·ªÉ nh·∫≠p s·ªë xu c∆∞·ª£c
      const modal = new ModalBuilder()
        .setCustomId('blackjack_bet_modal')
        .setTitle('üé¥ Nh·∫≠p s·ªë xu c∆∞·ª£c');

      const betInput = new TextInputBuilder()
        .setCustomId('bet_amount')
        .setLabel('S·ªë Xu C∆∞·ª£c')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('Nh·∫≠p 1-1000 xu')
        .setRequired(true)
        .setMinLength(1)
        .setMaxLength(4);

      const actionRow = new ActionRowBuilder().addComponents(betInput);
      modal.addComponents(actionRow);

      await interaction.showModal(modal);
      break;

    case 'blackjack_rules':
      const rulesEmbed = new EmbedBuilder()
        .setTitle('üé¥ LU·∫¨T CH∆†I X√å D√ÅCH')
        .setDescription('**M·ª•c ti√™u:** ƒê·∫°t t·ªïng ƒëi·ªÉm g·∫ßn 21 nh·∫•t m√† kh√¥ng v∆∞·ª£t qu√° 21')
        .addFields(
          {
            name: 'üÉè Gi√° tr·ªã b√†i',
            value: '‚Ä¢ **A**: 1 ho·∫∑c 11 ƒëi·ªÉm (t·ª± ƒë·ªông ch·ªçn t·ªët nh·∫•t)\n‚Ä¢ **2-10**: Theo s·ªë tr√™n b√†i\n‚Ä¢ **J, Q, K**: 10 ƒëi·ªÉm',
            inline: false
          },
          {
            name: 'üéØ C√°ch ch∆°i',
            value: '‚Ä¢ **Hit**: R√∫t th√™m b√†i\n‚Ä¢ **Stand**: D·ª´ng l·∫°i\n‚Ä¢ **Blackjack**: A + 10/J/Q/K (21 ƒëi·ªÉm v·ªõi 2 b√†i)\n‚Ä¢ **Bust**: V∆∞·ª£t qu√° 21 ƒëi·ªÉm (thua ngay)',
            inline: false
          },
          {
            name: 'ü§ñ Lu·∫≠t Dealer',
            value: '‚Ä¢ Ph·∫£i r√∫t b√†i n·∫øu < 17 ƒëi·ªÉm\n‚Ä¢ Ph·∫£i d·ª´ng n·∫øu ‚â• 17 ƒëi·ªÉm\n‚Ä¢ L√° th·ª© 2 b·ªã √∫p',
            inline: false
          },
          {
            name: 'üí∞ T·ª∑ l·ªá th∆∞·ªüng',
            value: '‚Ä¢ **Blackjack**: 1.8x ti·ªÅn c∆∞·ª£c\n‚Ä¢ **Th·∫Øng th∆∞·ªùng**: 1.8x ti·ªÅn c∆∞·ª£c\n‚Ä¢ **H√≤a**: Ho√†n ti·ªÅn c∆∞·ª£c\n‚Ä¢ **Thua**: M·∫•t ti·ªÅn c∆∞·ª£c',
            inline: false
          },
          {
            name: '‚öôÔ∏è C·∫•u h√¨nh',
            value: '‚Ä¢ C∆∞·ª£c t·ªëi thi·ªÉu: **1 xu**\n‚Ä¢ C∆∞·ª£c t·ªëi ƒëa: **1,000 xu**\n‚Ä¢ T·ª∑ l·ªá th·∫Øng: **30%** (kh√≥ th·∫Øng)\n‚Ä¢ S·ªë b·ªô b√†i: **1 b·ªô** (t·ª± ƒë·ªông x√°o l·∫°i)',
            inline: false
          }
        )
        .setColor('#ffdd57')
        .setFooter({ text: '·∫§n n√∫t "Ch∆°i X√¨ D√°ch" ƒë·ªÉ b·∫Øt ƒë·∫ßu!' });

      await interaction.reply({ embeds: [rulesEmbed], ephemeral: true });
      break;

    case 'game_stats':
      const stats = await getBlackjackStats(interaction.user.id);
      
      if (!stats) {
        await interaction.reply({
          content: '‚ùå B·∫°n ch∆∞a ch∆°i game x√¨ d√°ch n√†o!',
          ephemeral: true
        });
        return;
      }

      const statsEmbed = new EmbedBuilder()
        .setTitle('üé¥ Th·ªëng k√™ X√¨ D√°ch')
        .setDescription(`**${interaction.user.username}**`)
        .addFields(
          { name: 'üéÆ S·ªë game ƒë√£ ch∆°i', value: `${stats.gamesPlayed.toLocaleString()} game`, inline: true },
          { name: 'üí∞ T·ªïng th·∫Øng/thua', value: `${stats.totalWinnings.toLocaleString()} xu`, inline: true },
          { name: 'üìä T·ª∑ l·ªá th·∫Øng', value: `${stats.winRate}%`, inline: true }
        )
        .setColor(stats.totalWinnings >= 0 ? '#00ff00' : '#ff0000')
        .setThumbnail(interaction.user.displayAvatarURL())
        .setTimestamp();

      await interaction.reply({ embeds: [statsEmbed], ephemeral: true });
      break;
  }
}
